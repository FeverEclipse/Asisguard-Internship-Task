
STM32Modbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008abc  08008abc  00009abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cfc  08008cfc  0000a0d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008cfc  08008cfc  00009cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d04  08008d04  0000a0d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d04  08008d04  00009d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d08  08008d08  00009d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  08008d0c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200000d8  08008de0  0000a0d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08008de0  0000a4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018597  00000000  00000000  0000a104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e54  00000000  00000000  0002269b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  000254f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001074  00000000  00000000  00026a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002071b  00000000  00000000  00027a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e13  00000000  00000000  0004819f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dae81  00000000  00000000  0005ffb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ae33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd8  00000000  00000000  0013ae78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00140a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000d8 	.word	0x200000d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008aa4 	.word	0x08008aa4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000dc 	.word	0x200000dc
 8000214:	08008aa4 	.word	0x08008aa4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a08:	f000 b96a 	b.w	8000ce0 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14e      	bne.n	8000ace <__udivmoddi4+0xaa>
 8000a30:	4694      	mov	ip, r2
 8000a32:	458c      	cmp	ip, r1
 8000a34:	4686      	mov	lr, r0
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	d962      	bls.n	8000b02 <__udivmoddi4+0xde>
 8000a3c:	b14a      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a3e:	f1c2 0320 	rsb	r3, r2, #32
 8000a42:	4091      	lsls	r1, r2
 8000a44:	fa20 f303 	lsr.w	r3, r0, r3
 8000a48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a56:	fa1f f68c 	uxth.w	r6, ip
 8000a5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a62:	fb07 1114 	mls	r1, r7, r4, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb04 f106 	mul.w	r1, r4, r6
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x64>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a7a:	f080 8112 	bcs.w	8000ca2 <__udivmoddi4+0x27e>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 810f 	bls.w	8000ca2 <__udivmoddi4+0x27e>
 8000a84:	3c02      	subs	r4, #2
 8000a86:	4463      	add	r3, ip
 8000a88:	1a59      	subs	r1, r3, r1
 8000a8a:	fa1f f38e 	uxth.w	r3, lr
 8000a8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a92:	fb07 1110 	mls	r1, r7, r0, r1
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f606 	mul.w	r6, r0, r6
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x94>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aaa:	f080 80fc 	bcs.w	8000ca6 <__udivmoddi4+0x282>
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	f240 80f9 	bls.w	8000ca6 <__udivmoddi4+0x282>
 8000ab4:	4463      	add	r3, ip
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	1b9b      	subs	r3, r3, r6
 8000aba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000abe:	2100      	movs	r1, #0
 8000ac0:	b11d      	cbz	r5, 8000aca <__udivmoddi4+0xa6>
 8000ac2:	40d3      	lsrs	r3, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	d905      	bls.n	8000ade <__udivmoddi4+0xba>
 8000ad2:	b10d      	cbz	r5, 8000ad8 <__udivmoddi4+0xb4>
 8000ad4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4608      	mov	r0, r1
 8000adc:	e7f5      	b.n	8000aca <__udivmoddi4+0xa6>
 8000ade:	fab3 f183 	clz	r1, r3
 8000ae2:	2900      	cmp	r1, #0
 8000ae4:	d146      	bne.n	8000b74 <__udivmoddi4+0x150>
 8000ae6:	42a3      	cmp	r3, r4
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xcc>
 8000aea:	4290      	cmp	r0, r2
 8000aec:	f0c0 80f0 	bcc.w	8000cd0 <__udivmoddi4+0x2ac>
 8000af0:	1a86      	subs	r6, r0, r2
 8000af2:	eb64 0303 	sbc.w	r3, r4, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d0e6      	beq.n	8000aca <__udivmoddi4+0xa6>
 8000afc:	e9c5 6300 	strd	r6, r3, [r5]
 8000b00:	e7e3      	b.n	8000aca <__udivmoddi4+0xa6>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	f040 8090 	bne.w	8000c28 <__udivmoddi4+0x204>
 8000b08:	eba1 040c 	sub.w	r4, r1, ip
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	fa1f f78c 	uxth.w	r7, ip
 8000b14:	2101      	movs	r1, #1
 8000b16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b26:	fb07 f006 	mul.w	r0, r7, r6
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x11c>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x11a>
 8000b38:	4298      	cmp	r0, r3
 8000b3a:	f200 80cd 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b3e:	4626      	mov	r6, r4
 8000b40:	1a1c      	subs	r4, r3, r0
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b52:	fb00 f707 	mul.w	r7, r0, r7
 8000b56:	429f      	cmp	r7, r3
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x148>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b62:	d202      	bcs.n	8000b6a <__udivmoddi4+0x146>
 8000b64:	429f      	cmp	r7, r3
 8000b66:	f200 80b0 	bhi.w	8000cca <__udivmoddi4+0x2a6>
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	1bdb      	subs	r3, r3, r7
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	e7a5      	b.n	8000ac0 <__udivmoddi4+0x9c>
 8000b74:	f1c1 0620 	rsb	r6, r1, #32
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7e:	431f      	orrs	r7, r3
 8000b80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b84:	fa04 f301 	lsl.w	r3, r4, r1
 8000b88:	ea43 030c 	orr.w	r3, r3, ip
 8000b8c:	40f4      	lsrs	r4, r6
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	0c38      	lsrs	r0, r7, #16
 8000b94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b98:	fbb4 fef0 	udiv	lr, r4, r0
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ba4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bac:	45a1      	cmp	r9, r4
 8000bae:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb2:	d90a      	bls.n	8000bca <__udivmoddi4+0x1a6>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bba:	f080 8084 	bcs.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bbe:	45a1      	cmp	r9, r4
 8000bc0:	f240 8081 	bls.w	8000cc6 <__udivmoddi4+0x2a2>
 8000bc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bc8:	443c      	add	r4, r7
 8000bca:	eba4 0409 	sub.w	r4, r4, r9
 8000bce:	fa1f f983 	uxth.w	r9, r3
 8000bd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000be2:	45a4      	cmp	ip, r4
 8000be4:	d907      	bls.n	8000bf6 <__udivmoddi4+0x1d2>
 8000be6:	193c      	adds	r4, r7, r4
 8000be8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bec:	d267      	bcs.n	8000cbe <__udivmoddi4+0x29a>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0x29a>
 8000bf2:	3b02      	subs	r3, #2
 8000bf4:	443c      	add	r4, r7
 8000bf6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bfe:	eba4 040c 	sub.w	r4, r4, ip
 8000c02:	429c      	cmp	r4, r3
 8000c04:	46ce      	mov	lr, r9
 8000c06:	469c      	mov	ip, r3
 8000c08:	d351      	bcc.n	8000cae <__udivmoddi4+0x28a>
 8000c0a:	d04e      	beq.n	8000caa <__udivmoddi4+0x286>
 8000c0c:	b155      	cbz	r5, 8000c24 <__udivmoddi4+0x200>
 8000c0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c12:	eb64 040c 	sbc.w	r4, r4, ip
 8000c16:	fa04 f606 	lsl.w	r6, r4, r6
 8000c1a:	40cb      	lsrs	r3, r1
 8000c1c:	431e      	orrs	r6, r3
 8000c1e:	40cc      	lsrs	r4, r1
 8000c20:	e9c5 6400 	strd	r6, r4, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	e750      	b.n	8000aca <__udivmoddi4+0xa6>
 8000c28:	f1c2 0320 	rsb	r3, r2, #32
 8000c2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c34:	fa24 f303 	lsr.w	r3, r4, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	430c      	orrs	r4, r1
 8000c3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c44:	fa1f f78c 	uxth.w	r7, ip
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c50:	0c23      	lsrs	r3, r4, #16
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb00 f107 	mul.w	r1, r0, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x24c>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c66:	d22c      	bcs.n	8000cc2 <__udivmoddi4+0x29e>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d92a      	bls.n	8000cc2 <__udivmoddi4+0x29e>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4463      	add	r3, ip
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c78:	fb08 3311 	mls	r3, r8, r1, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb01 f307 	mul.w	r3, r1, r7
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x276>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c90:	d213      	bcs.n	8000cba <__udivmoddi4+0x296>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d911      	bls.n	8000cba <__udivmoddi4+0x296>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	1ae4      	subs	r4, r4, r3
 8000c9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ca0:	e739      	b.n	8000b16 <__udivmoddi4+0xf2>
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	e6f0      	b.n	8000a88 <__udivmoddi4+0x64>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e706      	b.n	8000ab8 <__udivmoddi4+0x94>
 8000caa:	45c8      	cmp	r8, r9
 8000cac:	d2ae      	bcs.n	8000c0c <__udivmoddi4+0x1e8>
 8000cae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cb6:	3801      	subs	r0, #1
 8000cb8:	e7a8      	b.n	8000c0c <__udivmoddi4+0x1e8>
 8000cba:	4631      	mov	r1, r6
 8000cbc:	e7ed      	b.n	8000c9a <__udivmoddi4+0x276>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	e799      	b.n	8000bf6 <__udivmoddi4+0x1d2>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e7d4      	b.n	8000c70 <__udivmoddi4+0x24c>
 8000cc6:	46d6      	mov	lr, sl
 8000cc8:	e77f      	b.n	8000bca <__udivmoddi4+0x1a6>
 8000cca:	4463      	add	r3, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	e74d      	b.n	8000b6c <__udivmoddi4+0x148>
 8000cd0:	4606      	mov	r6, r0
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e70f      	b.n	8000af8 <__udivmoddi4+0xd4>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	e730      	b.n	8000b40 <__udivmoddi4+0x11c>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_idiv0>:
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <HAL_ADC_ConvCpltCallback>:
 * \param *huart The handler for the UART protocol.
 * \param size The size of the incoming message.
 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) /* Check if the interrupt comes from ADC1 */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cf4:	d102      	bne.n	8000cfc <HAL_ADC_ConvCpltCallback+0x18>
    {
    /* Set flag to true */
    Flg.ADCCMPLT = 255;
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <HAL_ADC_ConvCpltCallback+0x24>)
 8000cf8:	22ff      	movs	r2, #255	@ 0xff
 8000cfa:	701a      	strb	r2, [r3, #0]
    }
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	200002b0 	.word	0x200002b0

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f001 f911 	bl	8001f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f824 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 f9e6 	bl	80010e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d1c:	f000 f9ba 	bl	8001094 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d20:	f000 f96c 	bl	8000ffc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d24:	f000 f868 	bl	8000df8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d28:	f000 f8f0 	bl	8000f0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Adc.Raw, 2);
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	4907      	ldr	r1, [pc, #28]	@ (8000d4c <main+0x40>)
 8000d30:	4807      	ldr	r0, [pc, #28]	@ (8000d50 <main+0x44>)
 8000d32:	f001 fd35 	bl	80027a0 <HAL_ADC_Start_DMA>

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 8000d36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d3a:	4906      	ldr	r1, [pc, #24]	@ (8000d54 <main+0x48>)
 8000d3c:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <main+0x4c>)
 8000d3e:	f007 fde6 	bl	800890e <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <main+0x50>)
 8000d44:	f004 fc3e 	bl	80055c4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <main+0x3c>
 8000d4c:	200002a0 	.word	0x200002a0
 8000d50:	200000f4 	.word	0x200000f4
 8000d54:	200002b4 	.word	0x200002b4
 8000d58:	2000020c 	.word	0x2000020c
 8000d5c:	200001c0 	.word	0x200001c0

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	@ 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	2238      	movs	r2, #56	@ 0x38
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f007 fe6c 	bl	8008a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f003 fbf4 	bl	8004570 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d92:	2340      	movs	r3, #64	@ 0x40
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d96:	2302      	movs	r3, #2
 8000d98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000da2:	2355      	movs	r3, #85	@ 0x55
 8000da4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fc8e 	bl	80046d8 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dc2:	f000 fa6d 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2104      	movs	r1, #4
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 ff8c 	bl	8004cfc <HAL_RCC_ClockConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000dea:	f000 fa59 	bl	80012a0 <Error_Handler>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3750      	adds	r7, #80	@ 0x50
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	@ 0x30
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f007 fe1b 	bl	8008a4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e16:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e1e:	4b38      	ldr	r3, [pc, #224]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e26:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2c:	4b34      	ldr	r3, [pc, #208]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e32:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e38:	4b31      	ldr	r3, [pc, #196]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3e:	4b30      	ldr	r3, [pc, #192]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e40:	2204      	movs	r2, #4
 8000e42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e44:	4b2e      	ldr	r3, [pc, #184]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e52:	2202      	movs	r2, #2
 8000e54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000e5e:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e60:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000e64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e66:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e76:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e84:	481e      	ldr	r0, [pc, #120]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000e86:	f001 fb07 	bl	8002498 <HAL_ADC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000e90:	f000 fa06 	bl	80012a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4818      	ldr	r0, [pc, #96]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000ea0:	f002 fccc 	bl	800383c <HAL_ADCEx_MultiModeConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000eaa:	f000 f9f9 	bl	80012a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_ADC1_Init+0x10c>)
 8000eb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eba:	237f      	movs	r3, #127	@ 0x7f
 8000ebc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000ecc:	f001 ff54 	bl	8002d78 <HAL_ADC_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ed6:	f000 f9e3 	bl	80012a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <MX_ADC1_Init+0x110>)
 8000edc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <MX_ADC1_Init+0x108>)
 8000ee8:	f001 ff46 	bl	8002d78 <HAL_ADC_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000ef2:	f000 f9d5 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	3730      	adds	r7, #48	@ 0x30
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200000f4 	.word	0x200000f4
 8000f04:	cb840000 	.word	0xcb840000
 8000f08:	c3210000 	.word	0xc3210000

08000f0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	@ 0x38
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f40:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff8 <MX_TIM3_Init+0xec>)
 8000f42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000f44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 33999;
 8000f52:	4b28      	ldr	r3, [pc, #160]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f54:	f248 42cf 	movw	r2, #33999	@ 0x84cf
 8000f58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f62:	2280      	movs	r2, #128	@ 0x80
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f66:	4823      	ldr	r0, [pc, #140]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f68:	f004 fad4 	bl	8005514 <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000f72:	f000 f995 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f80:	4619      	mov	r1, r3
 8000f82:	481c      	ldr	r0, [pc, #112]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f84:	f004 fe4c 	bl	8005c20 <HAL_TIM_ConfigClockSource>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f8e:	f000 f987 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f92:	4818      	ldr	r0, [pc, #96]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000f94:	f004 fb80 	bl	8005698 <HAL_TIM_PWM_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f9e:	f000 f97f 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4810      	ldr	r0, [pc, #64]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000fb2:	f005 fb85 	bl	80066c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000fbc:	f000 f970 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc0:	2360      	movs	r3, #96	@ 0x60
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000fd8:	f004 fd0e 	bl	80059f8 <HAL_TIM_PWM_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000fe2:	f000 f95d 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fe6:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <MX_TIM3_Init+0xe8>)
 8000fe8:	f000 fe0a 	bl	8001c00 <HAL_TIM_MspPostInit>

}
 8000fec:	bf00      	nop
 8000fee:	3738      	adds	r7, #56	@ 0x38
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200001c0 	.word	0x200001c0
 8000ff8:	40000400 	.word	0x40000400

08000ffc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	@ (8001090 <MX_USART2_UART_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_USART2_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_USART2_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_USART2_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001044:	4811      	ldr	r0, [pc, #68]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001046:	f005 fc03 	bl	8006850 <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 f926 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_USART2_UART_Init+0x90>)
 8001058:	f007 fbdd 	bl	8008816 <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001062:	f000 f91d 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	@ (800108c <MX_USART2_UART_Init+0x90>)
 800106a:	f007 fc12 	bl	8008892 <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 f914 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_USART2_UART_Init+0x90>)
 800107a:	f007 fb93 	bl	80087a4 <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 f90c 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000020c 	.word	0x2000020c
 8001090:	40004400 	.word	0x40004400

08001094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_DMA_Init+0x50>)
 800109c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109e:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010b6:	4a0b      	ldr	r2, [pc, #44]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_DMA_Init+0x50>)
 80010c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2038      	movs	r0, #56	@ 0x38
 80010d0:	f002 fd33 	bl	8003b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80010d4:	2038      	movs	r0, #56	@ 0x38
 80010d6:	f002 fd4a 	bl	8003b6e <HAL_NVIC_EnableIRQ>

}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fe:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <MX_GPIO_Init+0xc0>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a29      	ldr	r2, [pc, #164]	@ (80011a8 <MX_GPIO_Init+0xc0>)
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_GPIO_Init+0xc0>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <MX_GPIO_Init+0xc0>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <MX_GPIO_Init+0xc0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_GPIO_Init+0xc0>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_GPIO_Init+0xc0>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <MX_GPIO_Init+0xc0>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_GPIO_Init+0xc0>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|TX_EN_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f240 1101 	movw	r1, #257	@ 0x101
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f003 f9dc 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800115a:	4814      	ldr	r0, [pc, #80]	@ (80011ac <MX_GPIO_Init+0xc4>)
 800115c:	f003 f9d6 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 TX_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|TX_EN_Pin;
 8001160:	f240 1301 	movw	r3, #257	@ 0x101
 8001164:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117c:	f003 f844 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	4619      	mov	r1, r3
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_GPIO_Init+0xc4>)
 800119a:	f003 f835 	bl	8004208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000400 	.word	0x48000400

080011b0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

// Function to set the TIM3 timer frequency

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
	if(rx_buffer[0] == SLAVE_ID){
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <HAL_UARTEx_RxEventCallback+0xb8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b07      	cmp	r3, #7
 80011c2:	d147      	bne.n	8001254 <HAL_UARTEx_RxEventCallback+0xa4>
		switch(rx_buffer[1]){
 80011c4:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <HAL_UARTEx_RxEventCallback+0xb8>)
 80011c6:	785b      	ldrb	r3, [r3, #1]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	2b07      	cmp	r3, #7
 80011cc:	d841      	bhi.n	8001252 <HAL_UARTEx_RxEventCallback+0xa2>
 80011ce:	a201      	add	r2, pc, #4	@ (adr r2, 80011d4 <HAL_UARTEx_RxEventCallback+0x24>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	080011f5 	.word	0x080011f5
 80011d8:	080011fb 	.word	0x080011fb
 80011dc:	08001253 	.word	0x08001253
 80011e0:	08001201 	.word	0x08001201
 80011e4:	08001207 	.word	0x08001207
 80011e8:	08001253 	.word	0x08001253
 80011ec:	0800120d 	.word	0x0800120d
 80011f0:	08001213 	.word	0x08001213
		case 0x03:
			readHoldingRegs();
 80011f4:	f000 f8a6 	bl	8001344 <readHoldingRegs>
			break;
 80011f8:	e02c      	b.n	8001254 <HAL_UARTEx_RxEventCallback+0xa4>
		case 0x04:
			readInputRegs();
 80011fa:	f000 f977 	bl	80014ec <readInputRegs>
			break;
 80011fe:	e029      	b.n	8001254 <HAL_UARTEx_RxEventCallback+0xa4>
		case 0x06:
			writeSingleReg();
 8001200:	f000 fa1e 	bl	8001640 <writeSingleReg>
			break;
 8001204:	e026      	b.n	8001254 <HAL_UARTEx_RxEventCallback+0xa4>
		case 0x07:
			incrementRegByOne();
 8001206:	f000 fa9b 	bl	8001740 <incrementRegByOne>
			break;
 800120a:	e023      	b.n	8001254 <HAL_UARTEx_RxEventCallback+0xa4>
		case 0x09:
			decrementRegByOne();
 800120c:	f000 fb26 	bl	800185c <decrementRegByOne>
			break;
 8001210:	e020      	b.n	8001254 <HAL_UARTEx_RxEventCallback+0xa4>
		case 0x0A:
			if (Flg.ADCCMPLT){
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <HAL_UARTEx_RxEventCallback+0xbc>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d011      	beq.n	800123e <HAL_UARTEx_RxEventCallback+0x8e>
				  Adc.IntSensTmp = TMPSENSOR_getTemperature(Adc.Raw[1], Adc.Raw[0]);
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_UARTEx_RxEventCallback+0xc0>)
 800121c:	885b      	ldrh	r3, [r3, #2]
 800121e:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001220:	8812      	ldrh	r2, [r2, #0]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fdeb 	bl	8001e00 <TMPSENSOR_getTemperature>
 800122a:	eeb0 7a40 	vmov.f32	s14, s0
 800122e:	eef0 7a60 	vmov.f32	s15, s1
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001234:	ed83 7b02 	vstr	d7, [r3, #8]
				  Flg.ADCCMPLT = 0; /* Nullify flag */
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_UARTEx_RxEventCallback+0xbc>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
			  }
			readTemp(Adc.IntSensTmp);
 800123e:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001240:	ed93 7b02 	vldr	d7, [r3, #8]
 8001244:	eeb0 0a47 	vmov.f32	s0, s14
 8001248:	eef0 0a67 	vmov.f32	s1, s15
 800124c:	f000 fb94 	bl	8001978 <readTemp>
			break;
 8001250:	e000      	b.n	8001254 <HAL_UARTEx_RxEventCallback+0xa4>
		default:
			break;
 8001252:	bf00      	nop
		}
	}
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buffer, 256);
 8001254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001258:	4903      	ldr	r1, [pc, #12]	@ (8001268 <HAL_UARTEx_RxEventCallback+0xb8>)
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <HAL_UARTEx_RxEventCallback+0xc4>)
 800125c:	f007 fb57 	bl	800890e <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200002b4 	.word	0x200002b4
 800126c:	200002b0 	.word	0x200002b0
 8001270:	200002a0 	.word	0x200002a0
 8001274:	2000020c 	.word	0x2000020c

08001278 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001280:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001286:	f003 f959 	bl	800453c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800128a:	2101      	movs	r1, #1
 800128c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001290:	f003 f954 	bl	800453c <HAL_GPIO_TogglePin>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	48000400 	.word	0x48000400

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <Error_Handler+0x8>

080012ac <sendData>:
 *  \brief This function takes in the data buffer and adds the CRC bytes to it. And then transmits the data to the master device.
 *  \param *data Data buffer without the CRC bytes added.
 *  \param size The size of the data buffer before adding the CRC bytes.
*/
void sendData (uint8_t *data, int size)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fbb5 	bl	8001a2c <crc16>
 80012c2:	4603      	mov	r3, r0
 80012c4:	81fb      	strh	r3, [r7, #14]
	data[size] = (crc>>8)&0xFF;   // CRC LOW
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b299      	uxth	r1, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
	data[size+1] = crc&0xFF;  // CRC HIGH
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	89fa      	ldrh	r2, [r7, #14]
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, data, size+2, 1000);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3302      	adds	r3, #2
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4803      	ldr	r0, [pc, #12]	@ (8001300 <sendData+0x54>)
 80012f4:	f005 fafc 	bl	80068f0 <HAL_UART_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000020c 	.word	0x2000020c

08001304 <modbusException>:
 *  The byte structure of the response is as follows:\n
 *  | SLAVE_ID -> 1 BYTE | FUNCTION_CODE -> 1 BYTE | Exception code -> 1 BYTE | CRC -> 2 BYTES |\n
 *  \param exceptioncode The exception code to add to the transmit buffer.
*/
void modbusException (uint8_t exceptioncode)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	tx_buffer[0] = rx_buffer[0];       // slave ID
 800130e:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <modbusException+0x38>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <modbusException+0x3c>)
 8001314:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = rx_buffer[1]|0x80;  // adding 1 to the MSB of the function code
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <modbusException+0x38>)
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <modbusException+0x3c>)
 8001322:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = exceptioncode;   // Load the Exception code
 8001324:	4a06      	ldr	r2, [pc, #24]	@ (8001340 <modbusException+0x3c>)
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	7093      	strb	r3, [r2, #2]
	sendData(tx_buffer, 3);         // send Data... CRC will be calculated in the function
 800132a:	2103      	movs	r1, #3
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <modbusException+0x3c>)
 800132e:	f7ff ffbd 	bl	80012ac <sendData>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200002b4 	.word	0x200002b4
 8001340:	200003b4 	.word	0x200003b4

08001344 <readHoldingRegs>:
 * The holding registers are read-write permitted for outside-of-device access and can be used for temporary/custom values.
 * The byte structure of the response is as follows:\n
 * | SLAVE_ID -> 1 BYTE | FUNCTION_CODE -> 1 BYTE | BYTE COUNT -> 1 BYTE | DATA -> N(Requested register count)*2 BYTES| CRC -> 2 BYTES|
 */
uint8_t readHoldingRegs (void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((rx_buffer[2]<<8)|rx_buffer[3]);  // start Register Address
 800134a:	4b4d      	ldr	r3, [pc, #308]	@ (8001480 <readHoldingRegs+0x13c>)
 800134c:	789b      	ldrb	r3, [r3, #2]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b4b      	ldr	r3, [pc, #300]	@ (8001480 <readHoldingRegs+0x13c>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b21b      	sxth	r3, r3
 800135c:	83fb      	strh	r3, [r7, #30]

	uint16_t numRegs = ((rx_buffer[4]<<8)|rx_buffer[5]);   // number to registers master has requested
 800135e:	4b48      	ldr	r3, [pc, #288]	@ (8001480 <readHoldingRegs+0x13c>)
 8001360:	791b      	ldrb	r3, [r3, #4]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	4b46      	ldr	r3, [pc, #280]	@ (8001480 <readHoldingRegs+0x13c>)
 8001368:	795b      	ldrb	r3, [r3, #5]
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b21b      	sxth	r3, r3
 8001370:	81fb      	strh	r3, [r7, #14]
	if ((numRegs<1)||(numRegs>50))  // maximum no. of Registers as per the PDF
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <readHoldingRegs+0x3a>
 8001378:	89fb      	ldrh	r3, [r7, #14]
 800137a:	2b32      	cmp	r3, #50	@ 0x32
 800137c:	d904      	bls.n	8001388 <readHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 800137e:	2003      	movs	r0, #3
 8001380:	f7ff ffc0 	bl	8001304 <modbusException>
		return 0;
 8001384:	2300      	movs	r3, #0
 8001386:	e076      	b.n	8001476 <readHoldingRegs+0x132>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	4413      	add	r3, r2
 800138e:	b29b      	uxth	r3, r3
 8001390:	3b01      	subs	r3, #1
 8001392:	81bb      	strh	r3, [r7, #12]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8001394:	89bb      	ldrh	r3, [r7, #12]
 8001396:	2b31      	cmp	r3, #49	@ 0x31
 8001398:	d904      	bls.n	80013a4 <readHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800139a:	2002      	movs	r0, #2
 800139c:	f7ff ffb2 	bl	8001304 <modbusException>
		return 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e068      	b.n	8001476 <readHoldingRegs+0x132>
	}

	receivedCrc = (rx_buffer[6]<<8|rx_buffer[7]);
 80013a4:	4b36      	ldr	r3, [pc, #216]	@ (8001480 <readHoldingRegs+0x13c>)
 80013a6:	799b      	ldrb	r3, [r3, #6]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <readHoldingRegs+0x13c>)
 80013ae:	79db      	ldrb	r3, [r3, #7]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <readHoldingRegs+0x140>)
 80013ba:	801a      	strh	r2, [r3, #0]
	uint8_t crcList[6];
	for(int i= 0; i < 6 ; i++){
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	e00b      	b.n	80013da <readHoldingRegs+0x96>
		crcList[i] = rx_buffer[i];
 80013c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001480 <readHoldingRegs+0x13c>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	4413      	add	r3, r2
 80013c8:	7819      	ldrb	r1, [r3, #0]
 80013ca:	1d3a      	adds	r2, r7, #4
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	4413      	add	r3, r2
 80013d0:	460a      	mov	r2, r1
 80013d2:	701a      	strb	r2, [r3, #0]
	for(int i= 0; i < 6 ; i++){
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	3301      	adds	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	ddf0      	ble.n	80013c2 <readHoldingRegs+0x7e>
	}
	calculatedCrc = crc16(crcList, sizeof(crcList));
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2106      	movs	r1, #6
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fb21 	bl	8001a2c <crc16>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <readHoldingRegs+0x144>)
 80013f0:	801a      	strh	r2, [r3, #0]
	if(!(calculatedCrc == receivedCrc)){
 80013f2:	4b25      	ldr	r3, [pc, #148]	@ (8001488 <readHoldingRegs+0x144>)
 80013f4:	881a      	ldrh	r2, [r3, #0]
 80013f6:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <readHoldingRegs+0x140>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d004      	beq.n	8001408 <readHoldingRegs+0xc4>
		modbusException(ILLEGAL_CRC);
 80013fe:	2004      	movs	r0, #4
 8001400:	f7ff ff80 	bl	8001304 <modbusException>
		return 0;
 8001404:	2300      	movs	r3, #0
 8001406:	e036      	b.n	8001476 <readHoldingRegs+0x132>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	tx_buffer[0] = SLAVE_ID;  // slave ID
 8001408:	4b20      	ldr	r3, [pc, #128]	@ (800148c <readHoldingRegs+0x148>)
 800140a:	2207      	movs	r2, #7
 800140c:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = rx_buffer[1];  // function code
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <readHoldingRegs+0x13c>)
 8001410:	785a      	ldrb	r2, [r3, #1]
 8001412:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <readHoldingRegs+0x148>)
 8001414:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = numRegs*2;  // Byte count
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <readHoldingRegs+0x148>)
 8001420:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8001422:	2303      	movs	r3, #3
 8001424:	617b      	str	r3, [r7, #20]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	e01b      	b.n	8001464 <readHoldingRegs+0x120>
	{
		tx_buffer[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 800142c:	8bfb      	ldrh	r3, [r7, #30]
 800142e:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <readHoldingRegs+0x14c>)
 8001430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	b299      	uxth	r1, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	617a      	str	r2, [r7, #20]
 800143e:	b2c9      	uxtb	r1, r1
 8001440:	4a12      	ldr	r2, [pc, #72]	@ (800148c <readHoldingRegs+0x148>)
 8001442:	54d1      	strb	r1, [r2, r3]
		tx_buffer[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8001444:	8bfb      	ldrh	r3, [r7, #30]
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <readHoldingRegs+0x14c>)
 8001448:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	617a      	str	r2, [r7, #20]
 8001452:	b2c9      	uxtb	r1, r1
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <readHoldingRegs+0x148>)
 8001456:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8001458:	8bfb      	ldrh	r3, [r7, #30]
 800145a:	3301      	adds	r3, #1
 800145c:	83fb      	strh	r3, [r7, #30]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	3301      	adds	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbdf      	blt.n	800142c <readHoldingRegs+0xe8>
	}

	sendData(tx_buffer, indx);  // send data... CRC will be calculated in the function itself
 800146c:	6979      	ldr	r1, [r7, #20]
 800146e:	4807      	ldr	r0, [pc, #28]	@ (800148c <readHoldingRegs+0x148>)
 8001470:	f7ff ff1c 	bl	80012ac <sendData>
	return 1;   // success
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200002b4 	.word	0x200002b4
 8001484:	200004b4 	.word	0x200004b4
 8001488:	200004b6 	.word	0x200004b6
 800148c:	200003b4 	.word	0x200003b4
 8001490:	20000000 	.word	0x20000000

08001494 <updateInputs>:
 *  \brief This function updates the input values in the Input_Registers_Database list.
 *
 *  Only the temperature sensor value is used currently.
*/
uint8_t updateInputs(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	if (Flg.ADCCMPLT){
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <updateInputs+0x4c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d011      	beq.n	80014c4 <updateInputs+0x30>
		Adc.IntSensTmp = TMPSENSOR_getTemperature(Adc.Raw[1], Adc.Raw[0]);
 80014a0:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <updateInputs+0x50>)
 80014a2:	885b      	ldrh	r3, [r3, #2]
 80014a4:	4a0f      	ldr	r2, [pc, #60]	@ (80014e4 <updateInputs+0x50>)
 80014a6:	8812      	ldrh	r2, [r2, #0]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fca8 	bl	8001e00 <TMPSENSOR_getTemperature>
 80014b0:	eeb0 7a40 	vmov.f32	s14, s0
 80014b4:	eef0 7a60 	vmov.f32	s15, s1
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <updateInputs+0x50>)
 80014ba:	ed83 7b02 	vstr	d7, [r3, #8]
		Flg.ADCCMPLT = 0; /* Nullify flag */
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <updateInputs+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
	}
	Input_Registers_Database[0] = Adc.IntSensTmp;
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <updateInputs+0x50>)
 80014c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fa71 	bl	80009b4 <__aeabi_d2uiz>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <updateInputs+0x54>)
 80014d8:	801a      	strh	r2, [r3, #0]
	return 1;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200002b0 	.word	0x200002b0
 80014e4:	200002a0 	.word	0x200002a0
 80014e8:	20000064 	.word	0x20000064

080014ec <readInputRegs>:
 * The input registers are read-only for outside-of-device access and used for storing sensor related information.
 * The byte structure of the response is as follows:\n
 * | SLAVE_ID -> 1 BYTE | FUNCTION_CODE -> 1 BYTE | BYTE COUNT -> 1 BYTE | DATA -> N(Requested register count)*2 BYTES| CRC -> 2 BYTES|
 */
uint8_t readInputRegs (void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
	updateInputs(); // Update inputs database
 80014f2:	f7ff ffcf 	bl	8001494 <updateInputs>

	uint16_t startAddr = ((rx_buffer[2]<<8)|rx_buffer[3]);  // start Register Address
 80014f6:	4b4d      	ldr	r3, [pc, #308]	@ (800162c <readInputRegs+0x140>)
 80014f8:	789b      	ldrb	r3, [r3, #2]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	4b4b      	ldr	r3, [pc, #300]	@ (800162c <readInputRegs+0x140>)
 8001500:	78db      	ldrb	r3, [r3, #3]
 8001502:	b21b      	sxth	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b21b      	sxth	r3, r3
 8001508:	83fb      	strh	r3, [r7, #30]

	uint16_t numRegs = ((rx_buffer[4]<<8)|rx_buffer[5]);   // number to registers master has requested
 800150a:	4b48      	ldr	r3, [pc, #288]	@ (800162c <readInputRegs+0x140>)
 800150c:	791b      	ldrb	r3, [r3, #4]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b46      	ldr	r3, [pc, #280]	@ (800162c <readInputRegs+0x140>)
 8001514:	795b      	ldrb	r3, [r3, #5]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21b      	sxth	r3, r3
 800151c:	81fb      	strh	r3, [r7, #14]
	if ((numRegs<1)||(numRegs>50))  // maximum no. of Registers as per the protocol
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <readInputRegs+0x3e>
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	2b32      	cmp	r3, #50	@ 0x32
 8001528:	d904      	bls.n	8001534 <readInputRegs+0x48>
	{
		modbusException(ILLEGAL_DATA_VALUE);  // send an exception
 800152a:	2003      	movs	r0, #3
 800152c:	f7ff feea 	bl	8001304 <modbusException>
		return 0;
 8001530:	2300      	movs	r3, #0
 8001532:	e076      	b.n	8001622 <readInputRegs+0x136>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8001534:	8bfa      	ldrh	r2, [r7, #30]
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	4413      	add	r3, r2
 800153a:	b29b      	uxth	r3, r3
 800153c:	3b01      	subs	r3, #1
 800153e:	81bb      	strh	r3, [r7, #12]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8001540:	89bb      	ldrh	r3, [r7, #12]
 8001542:	2b31      	cmp	r3, #49	@ 0x31
 8001544:	d904      	bls.n	8001550 <readInputRegs+0x64>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff fedc 	bl	8001304 <modbusException>
		return 0;
 800154c:	2300      	movs	r3, #0
 800154e:	e068      	b.n	8001622 <readInputRegs+0x136>
	}

	receivedCrc = (rx_buffer[6]<<8|rx_buffer[7]);
 8001550:	4b36      	ldr	r3, [pc, #216]	@ (800162c <readInputRegs+0x140>)
 8001552:	799b      	ldrb	r3, [r3, #6]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b34      	ldr	r3, [pc, #208]	@ (800162c <readInputRegs+0x140>)
 800155a:	79db      	ldrb	r3, [r3, #7]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <readInputRegs+0x144>)
 8001566:	801a      	strh	r2, [r3, #0]
	uint8_t crcList[6];
	for(int i= 0; i < 6 ; i++){
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	e00b      	b.n	8001586 <readInputRegs+0x9a>
		crcList[i] = rx_buffer[i];
 800156e:	4a2f      	ldr	r2, [pc, #188]	@ (800162c <readInputRegs+0x140>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	4413      	add	r3, r2
 8001574:	7819      	ldrb	r1, [r3, #0]
 8001576:	1d3a      	adds	r2, r7, #4
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	4413      	add	r3, r2
 800157c:	460a      	mov	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
	for(int i= 0; i < 6 ; i++){
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	3301      	adds	r3, #1
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b05      	cmp	r3, #5
 800158a:	ddf0      	ble.n	800156e <readInputRegs+0x82>
	}
	calculatedCrc = crc16(crcList, sizeof(crcList));
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2106      	movs	r1, #6
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fa4b 	bl	8001a2c <crc16>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <readInputRegs+0x148>)
 800159c:	801a      	strh	r2, [r3, #0]
	if(!(calculatedCrc == receivedCrc)){
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <readInputRegs+0x148>)
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <readInputRegs+0x144>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d004      	beq.n	80015b4 <readInputRegs+0xc8>
		modbusException(ILLEGAL_CRC);
 80015aa:	2004      	movs	r0, #4
 80015ac:	f7ff feaa 	bl	8001304 <modbusException>
		return 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e036      	b.n	8001622 <readInputRegs+0x136>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	tx_buffer[0] = SLAVE_ID;  // slave ID
 80015b4:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <readInputRegs+0x14c>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = rx_buffer[1];  // function code
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <readInputRegs+0x140>)
 80015bc:	785a      	ldrb	r2, [r3, #1]
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <readInputRegs+0x14c>)
 80015c0:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = numRegs*2;  // Byte count
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <readInputRegs+0x14c>)
 80015cc:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80015ce:	2303      	movs	r3, #3
 80015d0:	617b      	str	r3, [r7, #20]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	e01b      	b.n	8001610 <readInputRegs+0x124>
	{
		tx_buffer[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 80015d8:	8bfb      	ldrh	r3, [r7, #30]
 80015da:	4a18      	ldr	r2, [pc, #96]	@ (800163c <readInputRegs+0x150>)
 80015dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	b299      	uxth	r1, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	617a      	str	r2, [r7, #20]
 80015ea:	b2c9      	uxtb	r1, r1
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <readInputRegs+0x14c>)
 80015ee:	54d1      	strb	r1, [r2, r3]
		tx_buffer[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <readInputRegs+0x150>)
 80015f4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	617a      	str	r2, [r7, #20]
 80015fe:	b2c9      	uxtb	r1, r1
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <readInputRegs+0x14c>)
 8001602:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8001604:	8bfb      	ldrh	r3, [r7, #30]
 8001606:	3301      	adds	r3, #1
 8001608:	83fb      	strh	r3, [r7, #30]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	3301      	adds	r3, #1
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbdf      	blt.n	80015d8 <readInputRegs+0xec>
	}

	sendData(tx_buffer, indx);  // send data... CRC will be calculated in the function itself
 8001618:	6979      	ldr	r1, [r7, #20]
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <readInputRegs+0x14c>)
 800161c:	f7ff fe46 	bl	80012ac <sendData>
	return 1;   // success
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200002b4 	.word	0x200002b4
 8001630:	200004b4 	.word	0x200004b4
 8001634:	200004b6 	.word	0x200004b6
 8001638:	200003b4 	.word	0x200003b4
 800163c:	20000064 	.word	0x20000064

08001640 <writeSingleReg>:
 *
 * The byte structure of the response is as follows:\n
 * | SLAVE_ID -> 1 BYTE | FUNCTION_CODE -> 1 BYTE | Start Addr -> 2 BYTES | Data -> 2 BYTES | CRC -> 2 BYTES |
 */
uint8_t writeSingleReg (void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((rx_buffer[2]<<8)|rx_buffer[3]);  // start Register Address
 8001646:	4b39      	ldr	r3, [pc, #228]	@ (800172c <writeSingleReg+0xec>)
 8001648:	789b      	ldrb	r3, [r3, #2]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <writeSingleReg+0xec>)
 8001650:	78db      	ldrb	r3, [r3, #3]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	817b      	strh	r3, [r7, #10]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 800165a:	897b      	ldrh	r3, [r7, #10]
 800165c:	2b31      	cmp	r3, #49	@ 0x31
 800165e:	d904      	bls.n	800166a <writeSingleReg+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8001660:	2002      	movs	r0, #2
 8001662:	f7ff fe4f 	bl	8001304 <modbusException>
		return 0;
 8001666:	2300      	movs	r3, #0
 8001668:	e05b      	b.n	8001722 <writeSingleReg+0xe2>
	}

	receivedCrc = (rx_buffer[6]<<8|rx_buffer[7]);
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <writeSingleReg+0xec>)
 800166c:	799b      	ldrb	r3, [r3, #6]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <writeSingleReg+0xec>)
 8001674:	79db      	ldrb	r3, [r3, #7]
 8001676:	b21b      	sxth	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b21b      	sxth	r3, r3
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b2c      	ldr	r3, [pc, #176]	@ (8001730 <writeSingleReg+0xf0>)
 8001680:	801a      	strh	r2, [r3, #0]
	uint8_t crcList[6];
	for(int i= 0; i < 6 ; i++){
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e00b      	b.n	80016a0 <writeSingleReg+0x60>
		crcList[i] = rx_buffer[i];
 8001688:	4a28      	ldr	r2, [pc, #160]	@ (800172c <writeSingleReg+0xec>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4413      	add	r3, r2
 800168e:	7819      	ldrb	r1, [r3, #0]
 8001690:	1d3a      	adds	r2, r7, #4
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4413      	add	r3, r2
 8001696:	460a      	mov	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
	for(int i= 0; i < 6 ; i++){
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3301      	adds	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	ddf0      	ble.n	8001688 <writeSingleReg+0x48>
	}
	calculatedCrc = crc16(crcList, sizeof(crcList));
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2106      	movs	r1, #6
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f9be 	bl	8001a2c <crc16>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <writeSingleReg+0xf4>)
 80016b6:	801a      	strh	r2, [r3, #0]
	if(!(calculatedCrc == receivedCrc)){
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <writeSingleReg+0xf4>)
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <writeSingleReg+0xf0>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d004      	beq.n	80016ce <writeSingleReg+0x8e>
		modbusException(ILLEGAL_CRC);
 80016c4:	2004      	movs	r0, #4
 80016c6:	f7ff fe1d 	bl	8001304 <modbusException>
		return 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e029      	b.n	8001722 <writeSingleReg+0xe2>
	}
	/* Save the 16 bit data
	 * Data is the combination of 2 bytes, RxData[4] and RxData[5]
	 */

	Holding_Registers_Database[startAddr] = (rx_buffer[4]<<8)|rx_buffer[5];
 80016ce:	4b17      	ldr	r3, [pc, #92]	@ (800172c <writeSingleReg+0xec>)
 80016d0:	791b      	ldrb	r3, [r3, #4]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <writeSingleReg+0xec>)
 80016d8:	795b      	ldrb	r3, [r3, #5]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21a      	sxth	r2, r3
 80016e0:	897b      	ldrh	r3, [r7, #10]
 80016e2:	b291      	uxth	r1, r2
 80016e4:	4a14      	ldr	r2, [pc, #80]	@ (8001738 <writeSingleReg+0xf8>)
 80016e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	tx_buffer[0] = SLAVE_ID;    // slave ID
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <writeSingleReg+0xfc>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = rx_buffer[1];   // function code
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <writeSingleReg+0xec>)
 80016f2:	785a      	ldrb	r2, [r3, #1]
 80016f4:	4b11      	ldr	r3, [pc, #68]	@ (800173c <writeSingleReg+0xfc>)
 80016f6:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = rx_buffer[2];   // Start Addr HIGH Byte
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <writeSingleReg+0xec>)
 80016fa:	789a      	ldrb	r2, [r3, #2]
 80016fc:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <writeSingleReg+0xfc>)
 80016fe:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = rx_buffer[3];   // Start Addr LOW Byte
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <writeSingleReg+0xec>)
 8001702:	78da      	ldrb	r2, [r3, #3]
 8001704:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <writeSingleReg+0xfc>)
 8001706:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = rx_buffer[4];   // Reg Data HIGH Byte
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <writeSingleReg+0xec>)
 800170a:	791a      	ldrb	r2, [r3, #4]
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <writeSingleReg+0xfc>)
 800170e:	711a      	strb	r2, [r3, #4]
	tx_buffer[5] = rx_buffer[5];   // Reg Data LOW  Byte
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <writeSingleReg+0xec>)
 8001712:	795a      	ldrb	r2, [r3, #5]
 8001714:	4b09      	ldr	r3, [pc, #36]	@ (800173c <writeSingleReg+0xfc>)
 8001716:	715a      	strb	r2, [r3, #5]

	sendData(tx_buffer, 6);  // send data... CRC will be calculated in the function itself
 8001718:	2106      	movs	r1, #6
 800171a:	4808      	ldr	r0, [pc, #32]	@ (800173c <writeSingleReg+0xfc>)
 800171c:	f7ff fdc6 	bl	80012ac <sendData>
	return 1;   // success
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002b4 	.word	0x200002b4
 8001730:	200004b4 	.word	0x200004b4
 8001734:	200004b6 	.word	0x200004b6
 8001738:	20000000 	.word	0x20000000
 800173c:	200003b4 	.word	0x200003b4

08001740 <incrementRegByOne>:
 *
 *  \details The byte structure of the response is as follows:\n
 *	| Slave ID -> 1 BYTE | Function Code -> 1 BYTE | Register Address -> 2 BYTES | Updated Register Value -> 2 BYTES | CRC -> 2 BYTES|
 *
*/
uint8_t incrementRegByOne(void){
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((rx_buffer[2]<<8)|rx_buffer[3]);
 8001746:	4b40      	ldr	r3, [pc, #256]	@ (8001848 <incrementRegByOne+0x108>)
 8001748:	789b      	ldrb	r3, [r3, #2]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <incrementRegByOne+0x108>)
 8001750:	78db      	ldrb	r3, [r3, #3]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21b      	sxth	r3, r3
 8001758:	817b      	strh	r3, [r7, #10]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 800175a:	897b      	ldrh	r3, [r7, #10]
 800175c:	2b31      	cmp	r3, #49	@ 0x31
 800175e:	d904      	bls.n	800176a <incrementRegByOne+0x2a>
		{
			modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8001760:	2002      	movs	r0, #2
 8001762:	f7ff fdcf 	bl	8001304 <modbusException>
			return 0;
 8001766:	2300      	movs	r3, #0
 8001768:	e06a      	b.n	8001840 <incrementRegByOne+0x100>
		}

	receivedCrc = (rx_buffer[4]<<8|rx_buffer[5]);
 800176a:	4b37      	ldr	r3, [pc, #220]	@ (8001848 <incrementRegByOne+0x108>)
 800176c:	791b      	ldrb	r3, [r3, #4]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b21a      	sxth	r2, r3
 8001772:	4b35      	ldr	r3, [pc, #212]	@ (8001848 <incrementRegByOne+0x108>)
 8001774:	795b      	ldrb	r3, [r3, #5]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21b      	sxth	r3, r3
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b33      	ldr	r3, [pc, #204]	@ (800184c <incrementRegByOne+0x10c>)
 8001780:	801a      	strh	r2, [r3, #0]
	uint8_t crcList[4];
	for(int i= 0; i < 4 ; i++){
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e00b      	b.n	80017a0 <incrementRegByOne+0x60>
		crcList[i] = rx_buffer[i];
 8001788:	4a2f      	ldr	r2, [pc, #188]	@ (8001848 <incrementRegByOne+0x108>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4413      	add	r3, r2
 800178e:	7819      	ldrb	r1, [r3, #0]
 8001790:	1d3a      	adds	r2, r7, #4
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	460a      	mov	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
	for(int i= 0; i < 4 ; i++){
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3301      	adds	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	ddf0      	ble.n	8001788 <incrementRegByOne+0x48>
	}
	calculatedCrc = crc16(crcList, sizeof(crcList));
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2104      	movs	r1, #4
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f93e 	bl	8001a2c <crc16>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <incrementRegByOne+0x110>)
 80017b6:	801a      	strh	r2, [r3, #0]
	if(!(calculatedCrc == receivedCrc)){
 80017b8:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <incrementRegByOne+0x110>)
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	4b23      	ldr	r3, [pc, #140]	@ (800184c <incrementRegByOne+0x10c>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d004      	beq.n	80017ce <incrementRegByOne+0x8e>
		modbusException(ILLEGAL_CRC);
 80017c4:	2004      	movs	r0, #4
 80017c6:	f7ff fd9d 	bl	8001304 <modbusException>
		return 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e038      	b.n	8001840 <incrementRegByOne+0x100>
	}

	Holding_Registers_Database[startAddr]++;
 80017ce:	897b      	ldrh	r3, [r7, #10]
 80017d0:	4a20      	ldr	r2, [pc, #128]	@ (8001854 <incrementRegByOne+0x114>)
 80017d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017d6:	3201      	adds	r2, #1
 80017d8:	b291      	uxth	r1, r2
 80017da:	4a1e      	ldr	r2, [pc, #120]	@ (8001854 <incrementRegByOne+0x114>)
 80017dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if(Holding_Registers_Database[startAddr] > 256){
 80017e0:	897b      	ldrh	r3, [r7, #10]
 80017e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <incrementRegByOne+0x114>)
 80017e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017ec:	d904      	bls.n	80017f8 <incrementRegByOne+0xb8>
		Holding_Registers_Database[startAddr]=0;
 80017ee:	897b      	ldrh	r3, [r7, #10]
 80017f0:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <incrementRegByOne+0x114>)
 80017f2:	2100      	movs	r1, #0
 80017f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	tx_buffer[0] = SLAVE_ID;    // slave ID
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <incrementRegByOne+0x118>)
 80017fa:	2207      	movs	r2, #7
 80017fc:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = rx_buffer[1];   // function code
 80017fe:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <incrementRegByOne+0x108>)
 8001800:	785a      	ldrb	r2, [r3, #1]
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <incrementRegByOne+0x118>)
 8001804:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = rx_buffer[2];   // Start Addr HIGH Byte
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <incrementRegByOne+0x108>)
 8001808:	789a      	ldrb	r2, [r3, #2]
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <incrementRegByOne+0x118>)
 800180c:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = rx_buffer[3];   // Start Addr LOW Byte
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <incrementRegByOne+0x108>)
 8001810:	78da      	ldrb	r2, [r3, #3]
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <incrementRegByOne+0x118>)
 8001814:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = (Holding_Registers_Database[startAddr]>>8)&0xFF;
 8001816:	897b      	ldrh	r3, [r7, #10]
 8001818:	4a0e      	ldr	r2, [pc, #56]	@ (8001854 <incrementRegByOne+0x114>)
 800181a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	b29b      	uxth	r3, r3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <incrementRegByOne+0x118>)
 8001826:	711a      	strb	r2, [r3, #4]
	tx_buffer[5] = Holding_Registers_Database[startAddr]&0xFF;
 8001828:	897b      	ldrh	r3, [r7, #10]
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <incrementRegByOne+0x114>)
 800182c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <incrementRegByOne+0x118>)
 8001834:	715a      	strb	r2, [r3, #5]

	sendData(tx_buffer, 6);
 8001836:	2106      	movs	r1, #6
 8001838:	4807      	ldr	r0, [pc, #28]	@ (8001858 <incrementRegByOne+0x118>)
 800183a:	f7ff fd37 	bl	80012ac <sendData>
	return 1;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200002b4 	.word	0x200002b4
 800184c:	200004b4 	.word	0x200004b4
 8001850:	200004b6 	.word	0x200004b6
 8001854:	20000000 	.word	0x20000000
 8001858:	200003b4 	.word	0x200003b4

0800185c <decrementRegByOne>:
 *
 *  \details The byte structure of the response is as follows:\n
    | Slave ID -> 1 BYTE | Function Code -> 1 BYTE | Register Address -> 2 BYTES | Updated Register Value -> 2 BYTES | CRC -> 2 BYTES |
 *
*/
uint8_t decrementRegByOne(void){
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((rx_buffer[2]<<8)|rx_buffer[3]);
 8001862:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <decrementRegByOne+0x108>)
 8001864:	789b      	ldrb	r3, [r3, #2]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	4b3e      	ldr	r3, [pc, #248]	@ (8001964 <decrementRegByOne+0x108>)
 800186c:	78db      	ldrb	r3, [r3, #3]
 800186e:	b21b      	sxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b21b      	sxth	r3, r3
 8001874:	817b      	strh	r3, [r7, #10]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	2b31      	cmp	r3, #49	@ 0x31
 800187a:	d904      	bls.n	8001886 <decrementRegByOne+0x2a>
		{
			modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800187c:	2002      	movs	r0, #2
 800187e:	f7ff fd41 	bl	8001304 <modbusException>
			return 0;
 8001882:	2300      	movs	r3, #0
 8001884:	e06a      	b.n	800195c <decrementRegByOne+0x100>
		}

	receivedCrc = (rx_buffer[4]<<8|rx_buffer[5]);
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <decrementRegByOne+0x108>)
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <decrementRegByOne+0x108>)
 8001890:	795b      	ldrb	r3, [r3, #5]
 8001892:	b21b      	sxth	r3, r3
 8001894:	4313      	orrs	r3, r2
 8001896:	b21b      	sxth	r3, r3
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <decrementRegByOne+0x10c>)
 800189c:	801a      	strh	r2, [r3, #0]
	uint8_t crcList[4];
	for(int i= 0; i < 4 ; i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e00b      	b.n	80018bc <decrementRegByOne+0x60>
		crcList[i] = rx_buffer[i];
 80018a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001964 <decrementRegByOne+0x108>)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	7819      	ldrb	r1, [r3, #0]
 80018ac:	1d3a      	adds	r2, r7, #4
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	460a      	mov	r2, r1
 80018b4:	701a      	strb	r2, [r3, #0]
	for(int i= 0; i < 4 ; i++){
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	ddf0      	ble.n	80018a4 <decrementRegByOne+0x48>
	}
	calculatedCrc = crc16(crcList, sizeof(crcList));
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2104      	movs	r1, #4
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f8b0 	bl	8001a2c <crc16>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b26      	ldr	r3, [pc, #152]	@ (800196c <decrementRegByOne+0x110>)
 80018d2:	801a      	strh	r2, [r3, #0]
	if(!(calculatedCrc == receivedCrc)){
 80018d4:	4b25      	ldr	r3, [pc, #148]	@ (800196c <decrementRegByOne+0x110>)
 80018d6:	881a      	ldrh	r2, [r3, #0]
 80018d8:	4b23      	ldr	r3, [pc, #140]	@ (8001968 <decrementRegByOne+0x10c>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d004      	beq.n	80018ea <decrementRegByOne+0x8e>
		modbusException(ILLEGAL_CRC);
 80018e0:	2004      	movs	r0, #4
 80018e2:	f7ff fd0f 	bl	8001304 <modbusException>
		return 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e038      	b.n	800195c <decrementRegByOne+0x100>
	}
	Holding_Registers_Database[startAddr]--;
 80018ea:	897b      	ldrh	r3, [r7, #10]
 80018ec:	4a20      	ldr	r2, [pc, #128]	@ (8001970 <decrementRegByOne+0x114>)
 80018ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80018f2:	3a01      	subs	r2, #1
 80018f4:	b291      	uxth	r1, r2
 80018f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001970 <decrementRegByOne+0x114>)
 80018f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if(Holding_Registers_Database[startAddr] < 2){
 80018fc:	897b      	ldrh	r3, [r7, #10]
 80018fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001970 <decrementRegByOne+0x114>)
 8001900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d805      	bhi.n	8001914 <decrementRegByOne+0xb8>
		Holding_Registers_Database[startAddr] = 512;
 8001908:	897b      	ldrh	r3, [r7, #10]
 800190a:	4a19      	ldr	r2, [pc, #100]	@ (8001970 <decrementRegByOne+0x114>)
 800190c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001910:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
	tx_buffer[0] = SLAVE_ID;    // slave ID
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <decrementRegByOne+0x118>)
 8001916:	2207      	movs	r2, #7
 8001918:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = rx_buffer[1];   // function code
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <decrementRegByOne+0x108>)
 800191c:	785a      	ldrb	r2, [r3, #1]
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <decrementRegByOne+0x118>)
 8001920:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = rx_buffer[2];   // Start Addr HIGH Byte
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <decrementRegByOne+0x108>)
 8001924:	789a      	ldrb	r2, [r3, #2]
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <decrementRegByOne+0x118>)
 8001928:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = rx_buffer[3];   // Start Addr LOW Byte
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <decrementRegByOne+0x108>)
 800192c:	78da      	ldrb	r2, [r3, #3]
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <decrementRegByOne+0x118>)
 8001930:	70da      	strb	r2, [r3, #3]
	tx_buffer[4] = (Holding_Registers_Database[startAddr]>>8)&0xFF;
 8001932:	897b      	ldrh	r3, [r7, #10]
 8001934:	4a0e      	ldr	r2, [pc, #56]	@ (8001970 <decrementRegByOne+0x114>)
 8001936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b29b      	uxth	r3, r3
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <decrementRegByOne+0x118>)
 8001942:	711a      	strb	r2, [r3, #4]
	tx_buffer[5] = Holding_Registers_Database[startAddr]&0xFF;
 8001944:	897b      	ldrh	r3, [r7, #10]
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <decrementRegByOne+0x114>)
 8001948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <decrementRegByOne+0x118>)
 8001950:	715a      	strb	r2, [r3, #5]

	sendData(tx_buffer, 6);
 8001952:	2106      	movs	r1, #6
 8001954:	4807      	ldr	r0, [pc, #28]	@ (8001974 <decrementRegByOne+0x118>)
 8001956:	f7ff fca9 	bl	80012ac <sendData>
	return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200002b4 	.word	0x200002b4
 8001968:	200004b4 	.word	0x200004b4
 800196c:	200004b6 	.word	0x200004b6
 8001970:	20000000 	.word	0x20000000
 8001974:	200003b4 	.word	0x200003b4

08001978 <readTemp>:
 *
 * The byte structure of the response is as follows:\n
 * | Slave ID -> 1 BYTE | Function Code -> 1 BYTE | Temperature Value -> 1 BYTE | CRC -> 2 BYTES |
 * \param temp The temperature value from the sensor.
 */
uint8_t readTemp(double temp){
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0b00 	vstr	d0, [r7]
	receivedCrc = (rx_buffer[2]<<8|rx_buffer[3]);
 8001982:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <readTemp+0xa4>)
 8001984:	789b      	ldrb	r3, [r3, #2]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <readTemp+0xa4>)
 800198c:	78db      	ldrb	r3, [r3, #3]
 800198e:	b21b      	sxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b21b      	sxth	r3, r3
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b22      	ldr	r3, [pc, #136]	@ (8001a20 <readTemp+0xa8>)
 8001998:	801a      	strh	r2, [r3, #0]
		uint8_t crcList[2];
		for(int i= 0; i < 2 ; i++){
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e00c      	b.n	80019ba <readTemp+0x42>
			crcList[i] = rx_buffer[i];
 80019a0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a1c <readTemp+0xa4>)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	7819      	ldrb	r1, [r3, #0]
 80019a8:	f107 0208 	add.w	r2, r7, #8
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	460a      	mov	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
		for(int i= 0; i < 2 ; i++){
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	ddef      	ble.n	80019a0 <readTemp+0x28>
		}
		calculatedCrc = crc16(crcList, sizeof(crcList));
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	2102      	movs	r1, #2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f830 	bl	8001a2c <crc16>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <readTemp+0xac>)
 80019d2:	801a      	strh	r2, [r3, #0]
		if(!(calculatedCrc == receivedCrc)){
 80019d4:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <readTemp+0xac>)
 80019d6:	881a      	ldrh	r2, [r3, #0]
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <readTemp+0xa8>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d004      	beq.n	80019ea <readTemp+0x72>
			modbusException(ILLEGAL_CRC);
 80019e0:	2004      	movs	r0, #4
 80019e2:	f7ff fc8f 	bl	8001304 <modbusException>
			return 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e013      	b.n	8001a12 <readTemp+0x9a>
		}

	tx_buffer[0] = SLAVE_ID; // Slave ID
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <readTemp+0xb0>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = rx_buffer[1]; // Function code (0x0A)
 80019f0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <readTemp+0xa4>)
 80019f2:	785a      	ldrb	r2, [r3, #1]
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <readTemp+0xb0>)
 80019f6:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = (uint8_t) temp; // Set the temperature value to send.
 80019f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019fc:	f7fe ffda 	bl	80009b4 <__aeabi_d2uiz>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <readTemp+0xb0>)
 8001a06:	709a      	strb	r2, [r3, #2]
	sendData(tx_buffer, 3);
 8001a08:	2103      	movs	r1, #3
 8001a0a:	4807      	ldr	r0, [pc, #28]	@ (8001a28 <readTemp+0xb0>)
 8001a0c:	f7ff fc4e 	bl	80012ac <sendData>
	return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002b4 	.word	0x200002b4
 8001a20:	200004b4 	.word	0x200004b4
 8001a24:	200004b6 	.word	0x200004b6
 8001a28:	200003b4 	.word	0x200003b4

08001a2c <crc16>:
 * \param *buffer The data buffer to calculate the CRC of.
 * \param buffer_length The size of the data buffer(without adding the 2 bytes to be added after the calculation)
 * \return The 2-byte CRC value.
 */
uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001a38:	23ff      	movs	r3, #255	@ 0xff
 8001a3a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001a3c:	23ff      	movs	r3, #255	@ 0xff
 8001a3e:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001a40:	e013      	b.n	8001a6a <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	7bbb      	ldrb	r3, [r7, #14]
 8001a4c:	4053      	eors	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001a52:	4a0f      	ldr	r2, [pc, #60]	@ (8001a90 <crc16+0x64>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4413      	add	r3, r2
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	4053      	eors	r3, r2
 8001a5e:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001a60:	4a0c      	ldr	r2, [pc, #48]	@ (8001a94 <crc16+0x68>)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	807a      	strh	r2, [r7, #2]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e6      	bne.n	8001a42 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	b29b      	uxth	r3, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	08008abc 	.word	0x08008abc
 8001a94:	08008bbc 	.word	0x08008bbc

08001a98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_MspInit+0x44>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_MspInit+0x44>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_MspInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ace:	f002 fdf3 	bl	80046b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b094      	sub	sp, #80	@ 0x50
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2244      	movs	r2, #68	@ 0x44
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f006 ffab 	bl	8008a4c <memset>
  if(hadc->Instance==ADC1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001afe:	d14e      	bne.n	8001b9e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b04:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b06:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 fb0f 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8001b1c:	f7ff fbc0 	bl	80012a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b20:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b24:	4a20      	ldr	r2, [pc, #128]	@ (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb0 <HAL_ADC_MspInit+0xd0>)
 8001b3c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b40:	2205      	movs	r2, #5
 8001b42:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b50:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b52:	2280      	movs	r2, #128	@ 0x80
 8001b54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b68:	2220      	movs	r2, #32
 8001b6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b72:	480e      	ldr	r0, [pc, #56]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b74:	f002 f816 	bl	8003ba4 <HAL_DMA_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 8001b7e:	f7ff fb8f 	bl	80012a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a09      	ldr	r2, [pc, #36]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b86:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b88:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	2012      	movs	r0, #18
 8001b94:	f001 ffd1 	bl	8003b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b98:	2012      	movs	r0, #18
 8001b9a:	f001 ffe8 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3750      	adds	r7, #80	@ 0x50
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	20000160 	.word	0x20000160
 8001bb0:	40020408 	.word	0x40020408

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <HAL_TIM_Base_MspInit+0x44>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d113      	bne.n	8001bee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_TIM_Base_MspInit+0x48>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	4a0c      	ldr	r2, [pc, #48]	@ (8001bfc <HAL_TIM_Base_MspInit+0x48>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_TIM_Base_MspInit+0x48>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	201d      	movs	r0, #29
 8001be4:	f001 ffa9 	bl	8003b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001be8:	201d      	movs	r0, #29
 8001bea:	f001 ffc0 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	40021000 	.word	0x40021000

08001c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a11      	ldr	r2, [pc, #68]	@ (8001c64 <HAL_TIM_MspPostInit+0x64>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d11c      	bne.n	8001c5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <HAL_TIM_MspPostInit+0x68>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	4a10      	ldr	r2, [pc, #64]	@ (8001c68 <HAL_TIM_MspPostInit+0x68>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <HAL_TIM_MspPostInit+0x68>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c58:	f002 fad6 	bl	8004208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40000400 	.word	0x40000400
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b09a      	sub	sp, #104	@ 0x68
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	2244      	movs	r2, #68	@ 0x44
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f006 fedd 	bl	8008a4c <memset>
  if(huart->Instance==USART2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a23      	ldr	r2, [pc, #140]	@ (8001d24 <HAL_UART_MspInit+0xb8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d13e      	bne.n	8001d1a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 fa43 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cb4:	f7ff faf4 	bl	80012a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_UART_MspInit+0xbc>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <HAL_UART_MspInit+0xbc>)
 8001cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc4:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <HAL_UART_MspInit+0xbc>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <HAL_UART_MspInit+0xbc>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <HAL_UART_MspInit+0xbc>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_UART_MspInit+0xbc>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001ce8:	230c      	movs	r3, #12
 8001cea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d06:	f002 fa7f 	bl	8004208 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2026      	movs	r0, #38	@ 0x26
 8001d10:	f001 ff13 	bl	8003b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d14:	2026      	movs	r0, #38	@ 0x26
 8001d16:	f001 ff2a 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3768      	adds	r7, #104	@ 0x68
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40004400 	.word	0x40004400
 8001d28:	40021000 	.word	0x40021000

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <NMI_Handler+0x4>

08001d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <HardFault_Handler+0x4>

08001d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <MemManage_Handler+0x4>

08001d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f000 f92b 	bl	8001fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <ADC1_2_IRQHandler+0x10>)
 8001d92:	f000 fdb9 	bl	8002908 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200000f4 	.word	0x200000f4

08001da0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <TIM3_IRQHandler+0x10>)
 8001da6:	f003 fcd8 	bl	800575a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200001c0 	.word	0x200001c0

08001db4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <USART2_IRQHandler+0x10>)
 8001dba:	f004 fe27 	bl	8006a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000020c 	.word	0x2000020c

08001dc8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <DMA2_Channel1_IRQHandler+0x10>)
 8001dce:	f002 f8cc 	bl	8003f6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000160 	.word	0x20000160

08001ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <SystemInit+0x20>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <SystemInit+0x20>)
 8001de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <TMPSENSOR_getTemperature>:
  * @param Temperature sensor's ADC 16-bit value, Internal Reference ADC 16-bit value (if use)
  * @retval Internal sensor temperature
  */


double TMPSENSOR_getTemperature(uint16_t adc_sensor, uint16_t adc_intref){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	80fb      	strh	r3, [r7, #6]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	80bb      	strh	r3, [r7, #4]

#if(TMPSENSOR_USE_INTREF)

	double intref_vol = (TMPSENSOR_ADCMAX*TMPSENSOR_ADCVREFINT)/adc_intref;
 8001e10:	88bb      	ldrh	r3, [r7, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb52 	bl	80004bc <__aeabi_i2d>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	a12b      	add	r1, pc, #172	@ (adr r1, 8001ecc <TMPSENSOR_getTemperature+0xcc>)
 8001e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e22:	f7fe fcdf 	bl	80007e4 <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9c7 2306 	strd	r2, r3, [r7, #24]

#else
	double intref_vol = TMPSENSOR_ADCREFVOL;
#endif

	double sensor_vol = adc_sensor * intref_vol/TMPSENSOR_ADCMAX;
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb43 	bl	80004bc <__aeabi_i2d>
 8001e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e3a:	f7fe fba9 	bl	8000590 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	a323      	add	r3, pc, #140	@ (adr r3, 8001ed4 <TMPSENSOR_getTemperature+0xd4>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fcca 	bl	80007e4 <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	e9c7 2304 	strd	r2, r3, [r7, #16]

	double sensor_tmp = (sensor_vol - TMPSENSOR_V25) *1000.0/TMPSENSOR_AVGSLOPE + 25.0;
 8001e58:	a320      	add	r3, pc, #128	@ (adr r3, 8001edc <TMPSENSOR_getTemperature+0xdc>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e62:	f7fe f9dd 	bl	8000220 <__aeabi_dsub>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <TMPSENSOR_getTemperature+0xc0>)
 8001e74:	f7fe fb8c 	bl	8000590 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <TMPSENSOR_getTemperature+0xc4>)
 8001e86:	f7fe fcad 	bl	80007e4 <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <TMPSENSOR_getTemperature+0xc8>)
 8001e98:	f7fe f9c4 	bl	8000224 <__adddf3>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return sensor_tmp;
 8001ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ea8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001eac:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb0:	eef0 0a67 	vmov.f32	s1, s15
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	408f4000 	.word	0x408f4000
 8001ec4:	40040000 	.word	0x40040000
 8001ec8:	40390000 	.word	0x40390000
 8001ecc:	33333333 	.word	0x33333333
 8001ed0:	40b35af3 	.word	0x40b35af3
 8001ed4:	00000000 	.word	0x00000000
 8001ed8:	40affe00 	.word	0x40affe00
 8001edc:	851eb852 	.word	0x851eb852
 8001ee0:	3fe851eb 	.word	0x3fe851eb

08001ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ee4:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ee6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee8:	f7ff ff78 	bl	8001ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	@ (8001f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <LoopForever+0xe>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	@ (8001f30 <LoopForever+0x16>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f006 fda3 	bl	8008a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f16:	f7fe fef9 	bl	8000d0c <main>

08001f1a <LoopForever>:

LoopForever:
    b LoopForever
 8001f1a:	e7fe      	b.n	8001f1a <LoopForever>
  ldr   r0, =_estack
 8001f1c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001f28:	08008d0c 	.word	0x08008d0c
  ldr r2, =_sbss
 8001f2c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001f30:	200004bc 	.word	0x200004bc

08001f34 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <COMP1_2_3_IRQHandler>

08001f36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f001 fdef 	bl	8003b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f80e 	bl	8001f68 <HAL_InitTick>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	e001      	b.n	8001f5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f58:	f7ff fd9e 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f5c:	79fb      	ldrb	r3, [r7, #7]

}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <HAL_InitTick+0x68>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d022      	beq.n	8001fc2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f7c:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_InitTick+0x6c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <HAL_InitTick+0x68>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 fdfa 	bl	8003b8a <HAL_SYSTICK_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10f      	bne.n	8001fbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	d809      	bhi.n	8001fb6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001faa:	f001 fdc6 	bl	8003b3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <HAL_InitTick+0x70>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e007      	b.n	8001fc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e004      	b.n	8001fc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e001      	b.n	8001fc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200000d0 	.word	0x200000d0
 8001fd4:	200000c8 	.word	0x200000c8
 8001fd8:	200000cc 	.word	0x200000cc

08001fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <HAL_IncTick+0x1c>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a03      	ldr	r2, [pc, #12]	@ (8001ff8 <HAL_IncTick+0x1c>)
 8001fec:	6013      	str	r3, [r2, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	200004b8 	.word	0x200004b8
 8001ffc:	200000d0 	.word	0x200000d0

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	200004b8 	.word	0x200004b8

08002018 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	609a      	str	r2, [r3, #8]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	609a      	str	r2, [r3, #8]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3360      	adds	r3, #96	@ 0x60
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <LL_ADC_SetOffset+0x44>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	03fff000 	.word	0x03fff000

080020c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3360      	adds	r3, #96	@ 0x60
 80020d6:	461a      	mov	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3360      	adds	r3, #96	@ 0x60
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800212a:	b480      	push	{r7}
 800212c:	b087      	sub	sp, #28
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3360      	adds	r3, #96	@ 0x60
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	431a      	orrs	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3360      	adds	r3, #96	@ 0x60
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	615a      	str	r2, [r3, #20]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b087      	sub	sp, #28
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3330      	adds	r3, #48	@ 0x30
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	4413      	add	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	211f      	movs	r1, #31
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	401a      	ands	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0e9b      	lsrs	r3, r3, #26
 800221a:	f003 011f 	and.w	r1, r3, #31
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	431a      	orrs	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3314      	adds	r3, #20
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	0e5b      	lsrs	r3, r3, #25
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	4413      	add	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	0d1b      	lsrs	r3, r3, #20
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	2107      	movs	r1, #7
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	401a      	ands	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	0d1b      	lsrs	r3, r3, #20
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	43db      	mvns	r3, r3
 80022d2:	401a      	ands	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0318 	and.w	r3, r3, #24
 80022da:	4908      	ldr	r1, [pc, #32]	@ (80022fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80022dc:	40d9      	lsrs	r1, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	400b      	ands	r3, r1
 80022e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e6:	431a      	orrs	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	0007ffff 	.word	0x0007ffff

08002300 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 031f 	and.w	r3, r3, #31
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002348:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6093      	str	r3, [r2, #8]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800236c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002370:	d101      	bne.n	8002376 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002394:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002398:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023c0:	d101      	bne.n	80023c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <LL_ADC_IsEnabled+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_ADC_IsEnabled+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002432:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002436:	f043 0204 	orr.w	r2, r3, #4
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d101      	bne.n	8002462 <LL_ADC_REG_IsConversionOngoing+0x18>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b08      	cmp	r3, #8
 8002482:	d101      	bne.n	8002488 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b089      	sub	sp, #36	@ 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e167      	b.n	8002782 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff fb0d 	bl	8001ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff3f 	bl	800235c <LL_ADC_IsDeepPowerDownEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff25 	bl	8002338 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff5a 	bl	80023ac <LL_ADC_IsInternalRegulatorEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff3e 	bl	8002384 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002508:	4ba0      	ldr	r3, [pc, #640]	@ (800278c <HAL_ADC_Init+0x2f4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	4aa0      	ldr	r2, [pc, #640]	@ (8002790 <HAL_ADC_Init+0x2f8>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	3301      	adds	r3, #1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800251c:	e002      	b.n	8002524 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3b01      	subs	r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f9      	bne.n	800251e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff3c 	bl	80023ac <LL_ADC_IsInternalRegulatorEnabled>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10d      	bne.n	8002556 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	f043 0210 	orr.w	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff75 	bl	800244a <LL_ADC_REG_IsConversionOngoing>
 8002560:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 8100 	bne.w	8002770 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 80fc 	bne.w	8002770 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002580:	f043 0202 	orr.w	r2, r3, #2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff35 	bl	80023fc <LL_ADC_IsEnabled>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002598:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800259c:	f7ff ff2e 	bl	80023fc <LL_ADC_IsEnabled>
 80025a0:	4604      	mov	r4, r0
 80025a2:	487c      	ldr	r0, [pc, #496]	@ (8002794 <HAL_ADC_Init+0x2fc>)
 80025a4:	f7ff ff2a 	bl	80023fc <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4323      	orrs	r3, r4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4619      	mov	r1, r3
 80025b6:	4878      	ldr	r0, [pc, #480]	@ (8002798 <HAL_ADC_Init+0x300>)
 80025b8:	f7ff fd2e 	bl	8002018 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7f5b      	ldrb	r3, [r3, #29]
 80025c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d106      	bne.n	80025f8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	045b      	lsls	r3, r3, #17
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	4b60      	ldr	r3, [pc, #384]	@ (800279c <HAL_ADC_Init+0x304>)
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	69b9      	ldr	r1, [r7, #24]
 8002624:	430b      	orrs	r3, r1
 8002626:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff14 	bl	8002470 <LL_ADC_INJ_IsConversionOngoing>
 8002648:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d16d      	bne.n	800272c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d16a      	bne.n	800272c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800265a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002662:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002672:	f023 0302 	bic.w	r3, r3, #2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	430b      	orrs	r3, r1
 800267e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d017      	beq.n	80026b8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002696:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80026a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80026a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6911      	ldr	r1, [r2, #16]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	430b      	orrs	r3, r1
 80026b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80026b6:	e013      	b.n	80026e0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80026c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80026d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d118      	bne.n	800271c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002706:	4311      	orrs	r1, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800270c:	430a      	orrs	r2, r1
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	611a      	str	r2, [r3, #16]
 800271a:	e007      	b.n	800272c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10c      	bne.n	800274e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f023 010f 	bic.w	r1, r3, #15
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	1e5a      	subs	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
 800274c:	e007      	b.n	800275e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 020f 	bic.w	r2, r2, #15
 800275c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800276e:	e007      	b.n	8002780 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	f043 0210 	orr.w	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002780:	7ffb      	ldrb	r3, [r7, #31]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	@ 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd90      	pop	{r4, r7, pc}
 800278a:	bf00      	nop
 800278c:	200000c8 	.word	0x200000c8
 8002790:	053e2d63 	.word	0x053e2d63
 8002794:	50000100 	.word	0x50000100
 8002798:	50000300 	.word	0x50000300
 800279c:	fff04007 	.word	0xfff04007

080027a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ac:	4851      	ldr	r0, [pc, #324]	@ (80028f4 <HAL_ADC_Start_DMA+0x154>)
 80027ae:	f7ff fda7 	bl	8002300 <LL_ADC_GetMultimode>
 80027b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fe46 	bl	800244a <LL_ADC_REG_IsConversionOngoing>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 808f 	bne.w	80028e4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_Start_DMA+0x34>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e08a      	b.n	80028ea <HAL_ADC_Start_DMA+0x14a>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d002      	beq.n	80027ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	d173      	bne.n	80028d6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 feb2 	bl	8003558 <ADC_Enable>
 80027f4:	4603      	mov	r3, r0
 80027f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d166      	bne.n	80028cc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a38      	ldr	r2, [pc, #224]	@ (80028f8 <HAL_ADC_Start_DMA+0x158>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d002      	beq.n	8002822 <HAL_ADC_Start_DMA+0x82>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	e001      	b.n	8002826 <HAL_ADC_Start_DMA+0x86>
 8002822:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	4293      	cmp	r3, r2
 800282c:	d002      	beq.n	8002834 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002850:	f023 0206 	bic.w	r2, r3, #6
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	661a      	str	r2, [r3, #96]	@ 0x60
 8002858:	e002      	b.n	8002860 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	4a25      	ldr	r2, [pc, #148]	@ (80028fc <HAL_ADC_Start_DMA+0x15c>)
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286c:	4a24      	ldr	r2, [pc, #144]	@ (8002900 <HAL_ADC_Start_DMA+0x160>)
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	4a23      	ldr	r2, [pc, #140]	@ (8002904 <HAL_ADC_Start_DMA+0x164>)
 8002876:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	221c      	movs	r2, #28
 800287e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0210 	orr.w	r2, r2, #16
 8002896:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3340      	adds	r3, #64	@ 0x40
 80028b2:	4619      	mov	r1, r3
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f001 fa1c 	bl	8003cf4 <HAL_DMA_Start_IT>
 80028bc:	4603      	mov	r3, r0
 80028be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fdac 	bl	8002422 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80028ca:	e00d      	b.n	80028e8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80028d4:	e008      	b.n	80028e8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80028e2:	e001      	b.n	80028e8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
 80028e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	50000300 	.word	0x50000300
 80028f8:	50000100 	.word	0x50000100
 80028fc:	08003665 	.word	0x08003665
 8002900:	0800373d 	.word	0x0800373d
 8002904:	08003759 	.word	0x08003759

08002908 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	@ 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002924:	4883      	ldr	r0, [pc, #524]	@ (8002b34 <HAL_ADC_IRQHandler+0x22c>)
 8002926:	f7ff fceb 	bl	8002300 <LL_ADC_GetMultimode>
 800292a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d017      	beq.n	8002966 <HAL_ADC_IRQHandler+0x5e>
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002950:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 ff65 	bl	8003828 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2202      	movs	r2, #2
 8002964:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <HAL_ADC_IRQHandler+0x72>
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8085 	beq.w	8002a90 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d07f      	beq.n	8002a90 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fc05 	bl	80021bc <LL_ADC_REG_IsTriggerSourceSWStart>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d064      	beq.n	8002a82 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002b38 <HAL_ADC_IRQHandler+0x230>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d002      	beq.n	80029c8 <HAL_ADC_IRQHandler+0xc0>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	e001      	b.n	80029cc <HAL_ADC_IRQHandler+0xc4>
 80029c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d008      	beq.n	80029e6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d002      	beq.n	80029e6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b09      	cmp	r3, #9
 80029e4:	d104      	bne.n	80029f0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	e00d      	b.n	8002a0c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a50      	ldr	r2, [pc, #320]	@ (8002b38 <HAL_ADC_IRQHandler+0x230>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d002      	beq.n	8002a00 <HAL_ADC_IRQHandler+0xf8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	e001      	b.n	8002a04 <HAL_ADC_IRQHandler+0xfc>
 8002a00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a04:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d135      	bne.n	8002a82 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d12e      	bne.n	8002a82 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fd0e 	bl	800244a <LL_ADC_REG_IsConversionOngoing>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d11a      	bne.n	8002a6a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 020c 	bic.w	r2, r2, #12
 8002a42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d112      	bne.n	8002a82 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a68:	e00b      	b.n	8002a82 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	f043 0210 	orr.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe f92e 	bl	8000ce4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	220c      	movs	r2, #12
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x19c>
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10b      	bne.n	8002abc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 809e 	beq.w	8002bec <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8098 	beq.w	8002bec <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fbae 	bl	800223a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002ade:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fb69 	bl	80021bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a11      	ldr	r2, [pc, #68]	@ (8002b38 <HAL_ADC_IRQHandler+0x230>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d002      	beq.n	8002afc <HAL_ADC_IRQHandler+0x1f4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e001      	b.n	8002b00 <HAL_ADC_IRQHandler+0x1f8>
 8002afc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d008      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d002      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b07      	cmp	r3, #7
 8002b18:	d104      	bne.n	8002b24 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	e011      	b.n	8002b48 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a03      	ldr	r2, [pc, #12]	@ (8002b38 <HAL_ADC_IRQHandler+0x230>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d006      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x234>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e005      	b.n	8002b40 <HAL_ADC_IRQHandler+0x238>
 8002b34:	50000300 	.word	0x50000300
 8002b38:	50000100 	.word	0x50000100
 8002b3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b40:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d047      	beq.n	8002bde <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_ADC_IRQHandler+0x260>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d03f      	beq.n	8002bde <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d13a      	bne.n	8002bde <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b72:	2b40      	cmp	r3, #64	@ 0x40
 8002b74:	d133      	bne.n	8002bde <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d12e      	bne.n	8002bde <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fc73 	bl	8002470 <LL_ADC_INJ_IsConversionOngoing>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11a      	bne.n	8002bc6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b9e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d112      	bne.n	8002bde <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbc:	f043 0201 	orr.w	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bc4:	e00b      	b.n	8002bde <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bca:	f043 0210 	orr.w	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fdfa 	bl	80037d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2260      	movs	r2, #96	@ 0x60
 8002bea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d011      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x312>
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f89f 	bl	8002d50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2280      	movs	r2, #128	@ 0x80
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x342>
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fde0 	bl	8003800 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <HAL_ADC_IRQHandler+0x372>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fdd2 	bl	8003814 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d036      	beq.n	8002cf2 <HAL_ADC_IRQHandler+0x3ea>
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d031      	beq.n	8002cf2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002c96:	2301      	movs	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9a:	e014      	b.n	8002cc6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ca2:	4825      	ldr	r0, [pc, #148]	@ (8002d38 <HAL_ADC_IRQHandler+0x430>)
 8002ca4:	f7ff fb3a 	bl	800231c <LL_ADC_GetMultiDMATransfer>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb2:	e008      	b.n	8002cc6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d10e      	bne.n	8002cea <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	f043 0202 	orr.w	r2, r3, #2
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f83d 	bl	8002d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2210      	movs	r2, #16
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d018      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x426>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d013      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d16:	f043 0208 	orr.w	r2, r3, #8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d26:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fd5f 	bl	80037ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	@ 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	50000300 	.word	0x50000300

08002d3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b0b6      	sub	sp, #216	@ 0xd8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x22>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e3c8      	b.n	800352c <HAL_ADC_ConfigChannel+0x7b4>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fb4f 	bl	800244a <LL_ADC_REG_IsConversionOngoing>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 83ad 	bne.w	800350e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f7ff fa0e 	bl	80021e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fb3d 	bl	800244a <LL_ADC_REG_IsConversionOngoing>
 8002dd0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fb49 	bl	8002470 <LL_ADC_INJ_IsConversionOngoing>
 8002dde:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 81d9 	bne.w	800319e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 81d4 	bne.w	800319e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dfe:	d10f      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7ff fa28 	bl	8002260 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff f9bc 	bl	8002196 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e1e:	e00e      	b.n	8002e3e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f7ff fa17 	bl	8002260 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff f9ac 	bl	8002196 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d022      	beq.n	8002ea6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6919      	ldr	r1, [r3, #16]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e70:	f7ff f906 	bl	8002080 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6919      	ldr	r1, [r3, #16]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	461a      	mov	r2, r3
 8002e82:	f7ff f952 	bl	800212a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x124>
 8002e96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e9a:	e000      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x126>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f7ff f95e 	bl	8002160 <LL_ADC_SetOffsetSaturation>
 8002ea4:	e17b      	b.n	800319e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff f90b 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x15a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f900 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	e01e      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x198>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f8f5 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ef0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e004      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1b0>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	e018      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1e2>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	e004      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d106      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f8c4 	bl	80020f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f8a8 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x220>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f89d 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	f003 021f 	and.w	r2, r3, #31
 8002f96:	e01e      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x25e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f892 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002fbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e004      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x276>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	e018      	b.n	8003020 <HAL_ADC_ConfigChannel+0x2a8>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003002:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003006:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800300a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e004      	b.n	8003020 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003016:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003020:	429a      	cmp	r2, r3
 8003022:	d106      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f861 	bl	80020f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2102      	movs	r1, #2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f845 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 800303e:	4603      	mov	r3, r0
 8003040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <HAL_ADC_ConfigChannel+0x2e6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2102      	movs	r1, #2
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff f83a 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8003054:	4603      	mov	r3, r0
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	e01e      	b.n	800309c <HAL_ADC_ConfigChannel+0x324>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2102      	movs	r1, #2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff f82f 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800307c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003080:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003084:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e004      	b.n	800309a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003090:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x33c>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	0e9b      	lsrs	r3, r3, #26
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	e016      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x36a>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80030c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80030cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80030d4:	2320      	movs	r3, #32
 80030d6:	e004      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80030d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d106      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff f800 	bl	80020f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2103      	movs	r1, #3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ffe4 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8003100:	4603      	mov	r3, r0
 8003102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x3a8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2103      	movs	r1, #3
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe ffd9 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 8003116:	4603      	mov	r3, r0
 8003118:	0e9b      	lsrs	r3, r3, #26
 800311a:	f003 021f 	and.w	r2, r3, #31
 800311e:	e017      	b.n	8003150 <HAL_ADC_ConfigChannel+0x3d8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2103      	movs	r1, #3
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe ffce 	bl	80020c8 <LL_ADC_GetOffsetChannel>
 800312c:	4603      	mov	r3, r0
 800312e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003138:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800313a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800313c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003142:	2320      	movs	r3, #32
 8003144:	e003      	b.n	800314e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003146:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x3f0>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	0e9b      	lsrs	r3, r3, #26
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	e011      	b.n	800318c <HAL_ADC_ConfigChannel+0x414>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003176:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003178:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800317a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003180:	2320      	movs	r3, #32
 8003182:	e003      	b.n	800318c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800318c:	429a      	cmp	r2, r3
 800318e:	d106      	bne.n	800319e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2200      	movs	r2, #0
 8003196:	2103      	movs	r1, #3
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe ffab 	bl	80020f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f92a 	bl	80023fc <LL_ADC_IsEnabled>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 8140 	bne.w	8003430 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	461a      	mov	r2, r3
 80031be:	f7ff f87b 	bl	80022b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	4a8f      	ldr	r2, [pc, #572]	@ (8003404 <HAL_ADC_ConfigChannel+0x68c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	f040 8131 	bne.w	8003430 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x47e>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	0e9b      	lsrs	r3, r3, #26
 80031e4:	3301      	adds	r3, #1
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	bf94      	ite	ls
 80031ee:	2301      	movls	r3, #1
 80031f0:	2300      	movhi	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	e019      	b.n	800322a <HAL_ADC_ConfigChannel+0x4b2>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003206:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2b09      	cmp	r3, #9
 8003222:	bf94      	ite	ls
 8003224:	2301      	movls	r3, #1
 8003226:	2300      	movhi	r3, #0
 8003228:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800322a:	2b00      	cmp	r3, #0
 800322c:	d079      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_ADC_ConfigChannel+0x4d2>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	3301      	adds	r3, #1
 8003242:	069b      	lsls	r3, r3, #26
 8003244:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003248:	e015      	b.n	8003276 <HAL_ADC_ConfigChannel+0x4fe>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800325a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800325c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003262:	2320      	movs	r3, #32
 8003264:	e003      	b.n	800326e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	3301      	adds	r3, #1
 8003270:	069b      	lsls	r3, r3, #26
 8003272:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x51e>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	3301      	adds	r3, #1
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	e017      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x54e>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80032a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80032a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80032ae:	2320      	movs	r3, #32
 80032b0:	e003      	b.n	80032ba <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80032b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x574>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	3301      	adds	r3, #1
 80032de:	f003 021f 	and.w	r2, r3, #31
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	051b      	lsls	r3, r3, #20
 80032ea:	e018      	b.n	800331e <HAL_ADC_ConfigChannel+0x5a6>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80032fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80032fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003304:	2320      	movs	r3, #32
 8003306:	e003      	b.n	8003310 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	3301      	adds	r3, #1
 8003312:	f003 021f 	and.w	r2, r3, #31
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331e:	430b      	orrs	r3, r1
 8003320:	e081      	b.n	8003426 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <HAL_ADC_ConfigChannel+0x5c6>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0e9b      	lsrs	r3, r3, #26
 8003334:	3301      	adds	r3, #1
 8003336:	069b      	lsls	r3, r3, #26
 8003338:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800333c:	e015      	b.n	800336a <HAL_ADC_ConfigChannel+0x5f2>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800334c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003356:	2320      	movs	r3, #32
 8003358:	e003      	b.n	8003362 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800335a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	3301      	adds	r3, #1
 8003364:	069b      	lsls	r3, r3, #26
 8003366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_ADC_ConfigChannel+0x612>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	3301      	adds	r3, #1
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2101      	movs	r1, #1
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	e017      	b.n	80033ba <HAL_ADC_ConfigChannel+0x642>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	61fb      	str	r3, [r7, #28]
  return result;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80033a2:	2320      	movs	r3, #32
 80033a4:	e003      	b.n	80033ae <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	ea42 0103 	orr.w	r1, r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10d      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x66e>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	3301      	adds	r3, #1
 80033d2:	f003 021f 	and.w	r2, r3, #31
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	3b1e      	subs	r3, #30
 80033de:	051b      	lsls	r3, r3, #20
 80033e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033e4:	e01e      	b.n	8003424 <HAL_ADC_ConfigChannel+0x6ac>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	613b      	str	r3, [r7, #16]
  return result;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80033fe:	2320      	movs	r3, #32
 8003400:	e006      	b.n	8003410 <HAL_ADC_ConfigChannel+0x698>
 8003402:	bf00      	nop
 8003404:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	3b1e      	subs	r3, #30
 800341e:	051b      	lsls	r3, r3, #20
 8003420:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003424:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342a:	4619      	mov	r1, r3
 800342c:	f7fe ff18 	bl	8002260 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b3f      	ldr	r3, [pc, #252]	@ (8003534 <HAL_ADC_ConfigChannel+0x7bc>)
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d071      	beq.n	8003520 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800343c:	483e      	ldr	r0, [pc, #248]	@ (8003538 <HAL_ADC_ConfigChannel+0x7c0>)
 800343e:	f7fe fe11 	bl	8002064 <LL_ADC_GetCommonPathInternalCh>
 8003442:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a3c      	ldr	r2, [pc, #240]	@ (800353c <HAL_ADC_ConfigChannel+0x7c4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_ADC_ConfigChannel+0x6e2>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3a      	ldr	r2, [pc, #232]	@ (8003540 <HAL_ADC_ConfigChannel+0x7c8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d127      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800345a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800345e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d121      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800346e:	d157      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003474:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003478:	4619      	mov	r1, r3
 800347a:	482f      	ldr	r0, [pc, #188]	@ (8003538 <HAL_ADC_ConfigChannel+0x7c0>)
 800347c:	f7fe fddf 	bl	800203e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003480:	4b30      	ldr	r3, [pc, #192]	@ (8003544 <HAL_ADC_ConfigChannel+0x7cc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	4a30      	ldr	r2, [pc, #192]	@ (8003548 <HAL_ADC_ConfigChannel+0x7d0>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	099b      	lsrs	r3, r3, #6
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	4613      	mov	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800349a:	e002      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3b01      	subs	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f9      	bne.n	800349c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a8:	e03a      	b.n	8003520 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a27      	ldr	r2, [pc, #156]	@ (800354c <HAL_ADC_ConfigChannel+0x7d4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d113      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a22      	ldr	r2, [pc, #136]	@ (8003550 <HAL_ADC_ConfigChannel+0x7d8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d02a      	beq.n	8003520 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034d2:	4619      	mov	r1, r3
 80034d4:	4818      	ldr	r0, [pc, #96]	@ (8003538 <HAL_ADC_ConfigChannel+0x7c0>)
 80034d6:	f7fe fdb2 	bl	800203e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034da:	e021      	b.n	8003520 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003554 <HAL_ADC_ConfigChannel+0x7dc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d11c      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d116      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <HAL_ADC_ConfigChannel+0x7d8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d011      	beq.n	8003520 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003500:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003504:	4619      	mov	r1, r3
 8003506:	480c      	ldr	r0, [pc, #48]	@ (8003538 <HAL_ADC_ConfigChannel+0x7c0>)
 8003508:	f7fe fd99 	bl	800203e <LL_ADC_SetCommonPathInternalCh>
 800350c:	e008      	b.n	8003520 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003528:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800352c:	4618      	mov	r0, r3
 800352e:	37d8      	adds	r7, #216	@ 0xd8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	80080000 	.word	0x80080000
 8003538:	50000300 	.word	0x50000300
 800353c:	c3210000 	.word	0xc3210000
 8003540:	90c00010 	.word	0x90c00010
 8003544:	200000c8 	.word	0x200000c8
 8003548:	053e2d63 	.word	0x053e2d63
 800354c:	c7520000 	.word	0xc7520000
 8003550:	50000100 	.word	0x50000100
 8003554:	cb840000 	.word	0xcb840000

08003558 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe ff47 	bl	80023fc <LL_ADC_IsEnabled>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d169      	bne.n	8003648 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <ADC_Enable+0xfc>)
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003586:	f043 0210 	orr.w	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e055      	b.n	800364a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe ff16 	bl	80023d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035a8:	482b      	ldr	r0, [pc, #172]	@ (8003658 <ADC_Enable+0x100>)
 80035aa:	f7fe fd5b 	bl	8002064 <LL_ADC_GetCommonPathInternalCh>
 80035ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b8:	4b28      	ldr	r3, [pc, #160]	@ (800365c <ADC_Enable+0x104>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	4a28      	ldr	r2, [pc, #160]	@ (8003660 <ADC_Enable+0x108>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035d2:	e002      	b.n	80035da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f9      	bne.n	80035d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035e0:	f7fe fd0e 	bl	8002000 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e6:	e028      	b.n	800363a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe ff05 	bl	80023fc <LL_ADC_IsEnabled>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fee9 	bl	80023d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003602:	f7fe fcfd 	bl	8002000 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d914      	bls.n	800363a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b01      	cmp	r3, #1
 800361c:	d00d      	beq.n	800363a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003622:	f043 0210 	orr.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e007      	b.n	800364a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d1cf      	bne.n	80035e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	8000003f 	.word	0x8000003f
 8003658:	50000300 	.word	0x50000300
 800365c:	200000c8 	.word	0x200000c8
 8003660:	053e2d63 	.word	0x053e2d63

08003664 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003676:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800367a:	2b00      	cmp	r3, #0
 800367c:	d14b      	bne.n	8003716 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d021      	beq.n	80036dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fd8d 	bl	80021bc <LL_ADC_REG_IsTriggerSourceSWStart>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d032      	beq.n	800370e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d12b      	bne.n	800370e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11f      	bne.n	800370e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036da:	e018      	b.n	800370e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d111      	bne.n	800370e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f7fd fae8 	bl	8000ce4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003714:	e00e      	b.n	8003734 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff fb1e 	bl	8002d64 <HAL_ADC_ErrorCallback>
}
 8003728:	e004      	b.n	8003734 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
}
 8003734:	bf00      	nop
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff faf6 	bl	8002d3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003776:	f043 0204 	orr.w	r2, r3, #4
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7ff faf0 	bl	8002d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <LL_ADC_IsEnabled>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <LL_ADC_IsEnabled+0x18>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <LL_ADC_IsEnabled+0x1a>
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d101      	bne.n	80037ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b0a1      	sub	sp, #132	@ 0x84
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003856:	2302      	movs	r3, #2
 8003858:	e08b      	b.n	8003972 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003862:	2300      	movs	r3, #0
 8003864:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003866:	2300      	movs	r3, #0
 8003868:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003872:	d102      	bne.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003874:	4b41      	ldr	r3, [pc, #260]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	e001      	b.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e06a      	b.n	8003972 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff ff87 	bl	80037b2 <LL_ADC_REG_IsConversionOngoing>
 80038a4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ff81 	bl	80037b2 <LL_ADC_REG_IsConversionOngoing>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d14c      	bne.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80038b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d149      	bne.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038bc:	4b30      	ldr	r3, [pc, #192]	@ (8003980 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80038be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d028      	beq.n	800391a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038da:	035b      	lsls	r3, r3, #13
 80038dc:	430b      	orrs	r3, r1
 80038de:	431a      	orrs	r2, r3
 80038e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038e8:	f7ff ff50 	bl	800378c <LL_ADC_IsEnabled>
 80038ec:	4604      	mov	r4, r0
 80038ee:	4823      	ldr	r0, [pc, #140]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80038f0:	f7ff ff4c 	bl	800378c <LL_ADC_IsEnabled>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4323      	orrs	r3, r4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d133      	bne.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003904:	f023 030f 	bic.w	r3, r3, #15
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	6811      	ldr	r1, [r2, #0]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	6892      	ldr	r2, [r2, #8]
 8003910:	430a      	orrs	r2, r1
 8003912:	431a      	orrs	r2, r3
 8003914:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003916:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003918:	e024      	b.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800391a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003924:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003926:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800392a:	f7ff ff2f 	bl	800378c <LL_ADC_IsEnabled>
 800392e:	4604      	mov	r4, r0
 8003930:	4812      	ldr	r0, [pc, #72]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003932:	f7ff ff2b 	bl	800378c <LL_ADC_IsEnabled>
 8003936:	4603      	mov	r3, r0
 8003938:	4323      	orrs	r3, r4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d112      	bne.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800393e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003946:	f023 030f 	bic.w	r3, r3, #15
 800394a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800394c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800394e:	e009      	b.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003962:	e000      	b.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003964:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800396e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003972:	4618      	mov	r0, r3
 8003974:	3784      	adds	r7, #132	@ 0x84
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}
 800397a:	bf00      	nop
 800397c:	50000100 	.word	0x50000100
 8003980:	50000300 	.word	0x50000300

08003984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003994:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039a0:	4013      	ands	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	@ (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d0:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <__NVIC_GetPriorityGrouping+0x18>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 0307 	and.w	r3, r3, #7
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	db0b      	blt.n	8003a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f003 021f 	and.w	r2, r3, #31
 8003a00:	4907      	ldr	r1, [pc, #28]	@ (8003a20 <__NVIC_EnableIRQ+0x38>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2001      	movs	r0, #1
 8003a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000e100 	.word	0xe000e100

08003a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db0a      	blt.n	8003a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	490c      	ldr	r1, [pc, #48]	@ (8003a70 <__NVIC_SetPriority+0x4c>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	0112      	lsls	r2, r2, #4
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	440b      	add	r3, r1
 8003a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a4c:	e00a      	b.n	8003a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4908      	ldr	r1, [pc, #32]	@ (8003a74 <__NVIC_SetPriority+0x50>)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	3b04      	subs	r3, #4
 8003a5c:	0112      	lsls	r2, r2, #4
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	440b      	add	r3, r1
 8003a62:	761a      	strb	r2, [r3, #24]
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000e100 	.word	0xe000e100
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	@ 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f1c3 0307 	rsb	r3, r3, #7
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	bf28      	it	cs
 8003a96:	2304      	movcs	r3, #4
 8003a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d902      	bls.n	8003aa8 <NVIC_EncodePriority+0x30>
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3b03      	subs	r3, #3
 8003aa6:	e000      	b.n	8003aaa <NVIC_EncodePriority+0x32>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	401a      	ands	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	43d9      	mvns	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	4313      	orrs	r3, r2
         );
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3724      	adds	r7, #36	@ 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003af0:	d301      	bcc.n	8003af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003af2:	2301      	movs	r3, #1
 8003af4:	e00f      	b.n	8003b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <SysTick_Config+0x40>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003afe:	210f      	movs	r1, #15
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b04:	f7ff ff8e 	bl	8003a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <SysTick_Config+0x40>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0e:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <SysTick_Config+0x40>)
 8003b10:	2207      	movs	r2, #7
 8003b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	e000e010 	.word	0xe000e010

08003b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff29 	bl	8003984 <__NVIC_SetPriorityGrouping>
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	4603      	mov	r3, r0
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b48:	f7ff ff40 	bl	80039cc <__NVIC_GetPriorityGrouping>
 8003b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	6978      	ldr	r0, [r7, #20]
 8003b54:	f7ff ff90 	bl	8003a78 <NVIC_EncodePriority>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff5f 	bl	8003a24 <__NVIC_SetPriority>
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff33 	bl	80039e8 <__NVIC_EnableIRQ>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ffa4 	bl	8003ae0 <SysTick_Config>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e08d      	b.n	8003cd2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b47      	ldr	r3, [pc, #284]	@ (8003cdc <HAL_DMA_Init+0x138>)
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d80f      	bhi.n	8003be2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b45      	ldr	r3, [pc, #276]	@ (8003ce0 <HAL_DMA_Init+0x13c>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	4a45      	ldr	r2, [pc, #276]	@ (8003ce4 <HAL_DMA_Init+0x140>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	009a      	lsls	r2, r3, #2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a42      	ldr	r2, [pc, #264]	@ (8003ce8 <HAL_DMA_Init+0x144>)
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40
 8003be0:	e00e      	b.n	8003c00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b40      	ldr	r3, [pc, #256]	@ (8003cec <HAL_DMA_Init+0x148>)
 8003bea:	4413      	add	r3, r2
 8003bec:	4a3d      	ldr	r2, [pc, #244]	@ (8003ce4 <HAL_DMA_Init+0x140>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	009a      	lsls	r2, r3, #2
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cf0 <HAL_DMA_Init+0x14c>)
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa76 	bl	8004144 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c60:	d102      	bne.n	8003c68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_DMA_Init+0x104>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d80c      	bhi.n	8003ca8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa96 	bl	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	e008      	b.n	8003cba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40020407 	.word	0x40020407
 8003ce0:	bffdfff8 	.word	0xbffdfff8
 8003ce4:	cccccccd 	.word	0xcccccccd
 8003ce8:	40020000 	.word	0x40020000
 8003cec:	bffdfbf8 	.word	0xbffdfbf8
 8003cf0:	40020400 	.word	0x40020400

08003cf4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_DMA_Start_IT+0x20>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e066      	b.n	8003de2 <HAL_DMA_Start_IT+0xee>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d155      	bne.n	8003dd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f9bb 	bl	80040c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 020e 	orr.w	r2, r2, #14
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e00f      	b.n	8003d8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0204 	bic.w	r2, r2, #4
 8003d7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 020a 	orr.w	r2, r2, #10
 8003d8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e005      	b.n	8003de0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d005      	beq.n	8003e0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2204      	movs	r2, #4
 8003e06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e037      	b.n	8003e7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 020e 	bic.w	r2, r2, #14
 8003e1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e42:	f003 021f 	and.w	r2, r3, #31
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00c      	beq.n	8003e7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e047      	b.n	8003f60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 020e 	bic.w	r2, r2, #14
 8003ede:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
    }
  }
  return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d026      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x7a>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d021      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d107      	bne.n	8003fbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0204 	bic.w	r2, r2, #4
 8003fbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f003 021f 	and.w	r2, r3, #31
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	2104      	movs	r1, #4
 8003fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d071      	beq.n	80040be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003fe2:	e06c      	b.n	80040be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2202      	movs	r2, #2
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d02e      	beq.n	8004056 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d029      	beq.n	8004056 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 020a 	bic.w	r2, r2, #10
 800401e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402c:	f003 021f 	and.w	r2, r3, #31
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	2102      	movs	r1, #2
 8004036:	fa01 f202 	lsl.w	r2, r1, r2
 800403a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d038      	beq.n	80040be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004054:	e033      	b.n	80040be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2208      	movs	r2, #8
 8004060:	409a      	lsls	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02a      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d025      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 020e 	bic.w	r2, r2, #14
 8004082:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004088:	f003 021f 	and.w	r2, r3, #31
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	2101      	movs	r1, #1
 8004092:	fa01 f202 	lsl.w	r2, r1, r2
 8004096:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d004      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
}
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d004      	beq.n	80040f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f003 021f 	and.w	r2, r3, #31
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	2101      	movs	r1, #1
 8004100:	fa01 f202 	lsl.w	r2, r1, r2
 8004104:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b10      	cmp	r3, #16
 8004114:	d108      	bne.n	8004128 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004126:	e007      	b.n	8004138 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004154:	429a      	cmp	r2, r3
 8004156:	d802      	bhi.n	800415e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004158:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e001      	b.n	8004162 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004160:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3b08      	subs	r3, #8
 800416e:	4a12      	ldr	r2, [pc, #72]	@ (80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	009a      	lsls	r2, r3, #2
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4413      	add	r3, r2
 8004184:	461a      	mov	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a0b      	ldr	r2, [pc, #44]	@ (80041bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800418e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2201      	movs	r2, #1
 8004198:	409a      	lsls	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40020407 	.word	0x40020407
 80041b0:	40020800 	.word	0x40020800
 80041b4:	40020820 	.word	0x40020820
 80041b8:	cccccccd 	.word	0xcccccccd
 80041bc:	40020880 	.word	0x40020880

080041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	461a      	mov	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a08      	ldr	r2, [pc, #32]	@ (8004204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041e2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	2201      	movs	r2, #1
 80041ee:	409a      	lsls	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	1000823f 	.word	0x1000823f
 8004204:	40020940 	.word	0x40020940

08004208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004216:	e15a      	b.n	80044ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	4013      	ands	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 814c 	beq.w	80044c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d005      	beq.n	8004248 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004244:	2b02      	cmp	r3, #2
 8004246:	d130      	bne.n	80042aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	2203      	movs	r2, #3
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800427e:	2201      	movs	r2, #1
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 0201 	and.w	r2, r3, #1
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d017      	beq.n	80042e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d123      	bne.n	800433a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	08da      	lsrs	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3208      	adds	r2, #8
 80042fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	220f      	movs	r2, #15
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	08da      	lsrs	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3208      	adds	r2, #8
 8004334:	6939      	ldr	r1, [r7, #16]
 8004336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	2203      	movs	r2, #3
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0203 	and.w	r2, r3, #3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80a6 	beq.w	80044c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437c:	4b5b      	ldr	r3, [pc, #364]	@ (80044ec <HAL_GPIO_Init+0x2e4>)
 800437e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004380:	4a5a      	ldr	r2, [pc, #360]	@ (80044ec <HAL_GPIO_Init+0x2e4>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6613      	str	r3, [r2, #96]	@ 0x60
 8004388:	4b58      	ldr	r3, [pc, #352]	@ (80044ec <HAL_GPIO_Init+0x2e4>)
 800438a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004394:	4a56      	ldr	r2, [pc, #344]	@ (80044f0 <HAL_GPIO_Init+0x2e8>)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	3302      	adds	r3, #2
 800439c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	220f      	movs	r2, #15
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80043be:	d01f      	beq.n	8004400 <HAL_GPIO_Init+0x1f8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a4c      	ldr	r2, [pc, #304]	@ (80044f4 <HAL_GPIO_Init+0x2ec>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d019      	beq.n	80043fc <HAL_GPIO_Init+0x1f4>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a4b      	ldr	r2, [pc, #300]	@ (80044f8 <HAL_GPIO_Init+0x2f0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <HAL_GPIO_Init+0x1f0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a4a      	ldr	r2, [pc, #296]	@ (80044fc <HAL_GPIO_Init+0x2f4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00d      	beq.n	80043f4 <HAL_GPIO_Init+0x1ec>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a49      	ldr	r2, [pc, #292]	@ (8004500 <HAL_GPIO_Init+0x2f8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d007      	beq.n	80043f0 <HAL_GPIO_Init+0x1e8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a48      	ldr	r2, [pc, #288]	@ (8004504 <HAL_GPIO_Init+0x2fc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_GPIO_Init+0x1e4>
 80043e8:	2305      	movs	r3, #5
 80043ea:	e00a      	b.n	8004402 <HAL_GPIO_Init+0x1fa>
 80043ec:	2306      	movs	r3, #6
 80043ee:	e008      	b.n	8004402 <HAL_GPIO_Init+0x1fa>
 80043f0:	2304      	movs	r3, #4
 80043f2:	e006      	b.n	8004402 <HAL_GPIO_Init+0x1fa>
 80043f4:	2303      	movs	r3, #3
 80043f6:	e004      	b.n	8004402 <HAL_GPIO_Init+0x1fa>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e002      	b.n	8004402 <HAL_GPIO_Init+0x1fa>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_GPIO_Init+0x1fa>
 8004400:	2300      	movs	r3, #0
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	f002 0203 	and.w	r2, r2, #3
 8004408:	0092      	lsls	r2, r2, #2
 800440a:	4093      	lsls	r3, r2
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004412:	4937      	ldr	r1, [pc, #220]	@ (80044f0 <HAL_GPIO_Init+0x2e8>)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	3302      	adds	r3, #2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004420:	4b39      	ldr	r3, [pc, #228]	@ (8004508 <HAL_GPIO_Init+0x300>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	43db      	mvns	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004444:	4a30      	ldr	r2, [pc, #192]	@ (8004508 <HAL_GPIO_Init+0x300>)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800444a:	4b2f      	ldr	r3, [pc, #188]	@ (8004508 <HAL_GPIO_Init+0x300>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	43db      	mvns	r3, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800446e:	4a26      	ldr	r2, [pc, #152]	@ (8004508 <HAL_GPIO_Init+0x300>)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004474:	4b24      	ldr	r3, [pc, #144]	@ (8004508 <HAL_GPIO_Init+0x300>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	43db      	mvns	r3, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004498:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <HAL_GPIO_Init+0x300>)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800449e:	4b1a      	ldr	r3, [pc, #104]	@ (8004508 <HAL_GPIO_Init+0x300>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044c2:	4a11      	ldr	r2, [pc, #68]	@ (8004508 <HAL_GPIO_Init+0x300>)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	3301      	adds	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f ae9d 	bne.w	8004218 <HAL_GPIO_Init+0x10>
  }
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40010000 	.word	0x40010000
 80044f4:	48000400 	.word	0x48000400
 80044f8:	48000800 	.word	0x48000800
 80044fc:	48000c00 	.word	0x48000c00
 8004500:	48001000 	.word	0x48001000
 8004504:	48001400 	.word	0x48001400
 8004508:	40010400 	.word	0x40010400

0800450c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
 8004518:	4613      	mov	r3, r2
 800451a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800451c:	787b      	ldrb	r3, [r7, #1]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004522:	887a      	ldrh	r2, [r7, #2]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004528:	e002      	b.n	8004530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4013      	ands	r3, r2
 8004554:	041a      	lsls	r2, r3, #16
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	43d9      	mvns	r1, r3
 800455a:	887b      	ldrh	r3, [r7, #2]
 800455c:	400b      	ands	r3, r1
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	619a      	str	r2, [r3, #24]
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d141      	bne.n	8004602 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800457e:	4b4b      	ldr	r3, [pc, #300]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458a:	d131      	bne.n	80045f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800458c:	4b47      	ldr	r3, [pc, #284]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800458e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004592:	4a46      	ldr	r2, [pc, #280]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800459c:	4b43      	ldr	r3, [pc, #268]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045a4:	4a41      	ldr	r2, [pc, #260]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045ac:	4b40      	ldr	r3, [pc, #256]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2232      	movs	r2, #50	@ 0x32
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	4a3f      	ldr	r2, [pc, #252]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	0c9b      	lsrs	r3, r3, #18
 80045be:	3301      	adds	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045c2:	e002      	b.n	80045ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ca:	4b38      	ldr	r3, [pc, #224]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d6:	d102      	bne.n	80045de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f2      	bne.n	80045c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045de:	4b33      	ldr	r3, [pc, #204]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ea:	d158      	bne.n	800469e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e057      	b.n	80046a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045f0:	4b2e      	ldr	r3, [pc, #184]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045f6:	4a2d      	ldr	r2, [pc, #180]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004600:	e04d      	b.n	800469e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004608:	d141      	bne.n	800468e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800460a:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004616:	d131      	bne.n	800467c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004618:	4b24      	ldr	r3, [pc, #144]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461e:	4a23      	ldr	r2, [pc, #140]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004628:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004630:	4a1e      	ldr	r2, [pc, #120]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004632:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004636:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004638:	4b1d      	ldr	r3, [pc, #116]	@ (80046b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2232      	movs	r2, #50	@ 0x32
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	4a1c      	ldr	r2, [pc, #112]	@ (80046b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	0c9b      	lsrs	r3, r3, #18
 800464a:	3301      	adds	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800464e:	e002      	b.n	8004656 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3b01      	subs	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004656:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004662:	d102      	bne.n	800466a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f2      	bne.n	8004650 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800466a:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004676:	d112      	bne.n	800469e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e011      	b.n	80046a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800467c:	4b0b      	ldr	r3, [pc, #44]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004682:	4a0a      	ldr	r2, [pc, #40]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004688:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800468c:	e007      	b.n	800469e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800468e:	4b07      	ldr	r3, [pc, #28]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004696:	4a05      	ldr	r2, [pc, #20]	@ (80046ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800469c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	40007000 	.word	0x40007000
 80046b0:	200000c8 	.word	0x200000c8
 80046b4:	431bde83 	.word	0x431bde83

080046b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4a04      	ldr	r2, [pc, #16]	@ (80046d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80046c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046c6:	6093      	str	r3, [r2, #8]
}
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40007000 	.word	0x40007000

080046d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e2fe      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d075      	beq.n	80047e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f6:	4b97      	ldr	r3, [pc, #604]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004700:	4b94      	ldr	r3, [pc, #592]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b0c      	cmp	r3, #12
 800470e:	d102      	bne.n	8004716 <HAL_RCC_OscConfig+0x3e>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b03      	cmp	r3, #3
 8004714:	d002      	beq.n	800471c <HAL_RCC_OscConfig+0x44>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d10b      	bne.n	8004734 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	4b8d      	ldr	r3, [pc, #564]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d05b      	beq.n	80047e0 <HAL_RCC_OscConfig+0x108>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d157      	bne.n	80047e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e2d9      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473c:	d106      	bne.n	800474c <HAL_RCC_OscConfig+0x74>
 800473e:	4b85      	ldr	r3, [pc, #532]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a84      	ldr	r2, [pc, #528]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e01d      	b.n	8004788 <HAL_RCC_OscConfig+0xb0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0x98>
 8004756:	4b7f      	ldr	r3, [pc, #508]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a7e      	ldr	r2, [pc, #504]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800475c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b7c      	ldr	r3, [pc, #496]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7b      	ldr	r2, [pc, #492]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0xb0>
 8004770:	4b78      	ldr	r3, [pc, #480]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a77      	ldr	r2, [pc, #476]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b75      	ldr	r3, [pc, #468]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a74      	ldr	r2, [pc, #464]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d013      	beq.n	80047b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fd fc36 	bl	8002000 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004798:	f7fd fc32 	bl	8002000 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	@ 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e29e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0xc0>
 80047b6:	e014      	b.n	80047e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd fc22 	bl	8002000 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fd fc1e 	bl	8002000 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	@ 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e28a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d2:	4b60      	ldr	r3, [pc, #384]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0xe8>
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d075      	beq.n	80048da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ee:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047f8:	4b56      	ldr	r3, [pc, #344]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b0c      	cmp	r3, #12
 8004806:	d102      	bne.n	800480e <HAL_RCC_OscConfig+0x136>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d002      	beq.n	8004814 <HAL_RCC_OscConfig+0x13c>
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d11f      	bne.n	8004854 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004814:	4b4f      	ldr	r3, [pc, #316]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_OscConfig+0x154>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e25d      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	4b49      	ldr	r3, [pc, #292]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	4946      	ldr	r1, [pc, #280]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004840:	4b45      	ldr	r3, [pc, #276]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fd fb8f 	bl	8001f68 <HAL_InitTick>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d043      	beq.n	80048d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e249      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d023      	beq.n	80048a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485c:	4b3d      	ldr	r3, [pc, #244]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a3c      	ldr	r2, [pc, #240]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fd fbca 	bl	8002000 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004870:	f7fd fbc6 	bl	8002000 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e232      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004882:	4b34      	ldr	r3, [pc, #208]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488e:	4b31      	ldr	r3, [pc, #196]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	061b      	lsls	r3, r3, #24
 800489c:	492d      	ldr	r1, [pc, #180]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	604b      	str	r3, [r1, #4]
 80048a2:	e01a      	b.n	80048da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80048aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fd fba6 	bl	8002000 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b8:	f7fd fba2 	bl	8002000 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e20e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ca:	4b22      	ldr	r3, [pc, #136]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x1e0>
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d041      	beq.n	800496a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01c      	beq.n	8004928 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ee:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80048f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f4:	4a17      	ldr	r2, [pc, #92]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fe:	f7fd fb7f 	bl	8002000 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004906:	f7fd fb7b 	bl	8002000 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1e7      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004918:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800491a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0ef      	beq.n	8004906 <HAL_RCC_OscConfig+0x22e>
 8004926:	e020      	b.n	800496a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004928:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 800492a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800492e:	4a09      	ldr	r2, [pc, #36]	@ (8004954 <HAL_RCC_OscConfig+0x27c>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fd fb62 	bl	8002000 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800493e:	e00d      	b.n	800495c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004940:	f7fd fb5e 	bl	8002000 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d906      	bls.n	800495c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e1ca      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	200000cc 	.word	0x200000cc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800495c:	4b8c      	ldr	r3, [pc, #560]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 800495e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1ea      	bne.n	8004940 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80a6 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004978:	2300      	movs	r3, #0
 800497a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800497c:	4b84      	ldr	r3, [pc, #528]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_RCC_OscConfig+0x2b4>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <HAL_RCC_OscConfig+0x2b6>
 800498c:	2300      	movs	r3, #0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00d      	beq.n	80049ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	4b7f      	ldr	r3, [pc, #508]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004996:	4a7e      	ldr	r2, [pc, #504]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499c:	6593      	str	r3, [r2, #88]	@ 0x58
 800499e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049aa:	2301      	movs	r3, #1
 80049ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ae:	4b79      	ldr	r3, [pc, #484]	@ (8004b94 <HAL_RCC_OscConfig+0x4bc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d118      	bne.n	80049ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ba:	4b76      	ldr	r3, [pc, #472]	@ (8004b94 <HAL_RCC_OscConfig+0x4bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a75      	ldr	r2, [pc, #468]	@ (8004b94 <HAL_RCC_OscConfig+0x4bc>)
 80049c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c6:	f7fd fb1b 	bl	8002000 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ce:	f7fd fb17 	bl	8002000 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e183      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b94 <HAL_RCC_OscConfig+0x4bc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d108      	bne.n	8004a06 <HAL_RCC_OscConfig+0x32e>
 80049f4:	4b66      	ldr	r3, [pc, #408]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	4a65      	ldr	r2, [pc, #404]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a04:	e024      	b.n	8004a50 <HAL_RCC_OscConfig+0x378>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d110      	bne.n	8004a30 <HAL_RCC_OscConfig+0x358>
 8004a0e:	4b60      	ldr	r3, [pc, #384]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a14:	4a5e      	ldr	r2, [pc, #376]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a24:	4a5a      	ldr	r2, [pc, #360]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a2e:	e00f      	b.n	8004a50 <HAL_RCC_OscConfig+0x378>
 8004a30:	4b57      	ldr	r3, [pc, #348]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a36:	4a56      	ldr	r2, [pc, #344]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a40:	4b53      	ldr	r3, [pc, #332]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a46:	4a52      	ldr	r2, [pc, #328]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004a48:	f023 0304 	bic.w	r3, r3, #4
 8004a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d016      	beq.n	8004a86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fd fad2 	bl	8002000 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd face 	bl	8002000 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e138      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a76:	4b46      	ldr	r3, [pc, #280]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0ed      	beq.n	8004a60 <HAL_RCC_OscConfig+0x388>
 8004a84:	e015      	b.n	8004ab2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a86:	f7fd fabb 	bl	8002000 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7fd fab7 	bl	8002000 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e121      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ed      	bne.n	8004a8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ab2:	7ffb      	ldrb	r3, [r7, #31]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab8:	4b35      	ldr	r3, [pc, #212]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abc:	4a34      	ldr	r2, [pc, #208]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ac2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d03c      	beq.n	8004b4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01c      	beq.n	8004b12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ade:	4a2c      	ldr	r2, [pc, #176]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fd fa8a 	bl	8002000 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af0:	f7fd fa86 	bl	8002000 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e0f2      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b02:	4b23      	ldr	r3, [pc, #140]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0ef      	beq.n	8004af0 <HAL_RCC_OscConfig+0x418>
 8004b10:	e01b      	b.n	8004b4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b12:	4b1f      	ldr	r3, [pc, #124]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b18:	4a1d      	ldr	r2, [pc, #116]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fd fa6d 	bl	8002000 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b2a:	f7fd fa69 	bl	8002000 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e0d5      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b3c:	4b14      	ldr	r3, [pc, #80]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ef      	bne.n	8004b2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80c9 	beq.w	8004ce6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b54:	4b0e      	ldr	r3, [pc, #56]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	f000 8083 	beq.w	8004c68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d15e      	bne.n	8004c28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a08      	ldr	r2, [pc, #32]	@ (8004b90 <HAL_RCC_OscConfig+0x4b8>)
 8004b70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fd fa43 	bl	8002000 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7c:	e00c      	b.n	8004b98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7e:	f7fd fa3f 	bl	8002000 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d905      	bls.n	8004b98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e0ab      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b98:	4b55      	ldr	r3, [pc, #340]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ec      	bne.n	8004b7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ba4:	4b52      	ldr	r3, [pc, #328]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	4b52      	ldr	r3, [pc, #328]	@ (8004cf4 <HAL_RCC_OscConfig+0x61c>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6a11      	ldr	r1, [r2, #32]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bb4:	3a01      	subs	r2, #1
 8004bb6:	0112      	lsls	r2, r2, #4
 8004bb8:	4311      	orrs	r1, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004bbe:	0212      	lsls	r2, r2, #8
 8004bc0:	4311      	orrs	r1, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004bc6:	0852      	lsrs	r2, r2, #1
 8004bc8:	3a01      	subs	r2, #1
 8004bca:	0552      	lsls	r2, r2, #21
 8004bcc:	4311      	orrs	r1, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bd2:	0852      	lsrs	r2, r2, #1
 8004bd4:	3a01      	subs	r2, #1
 8004bd6:	0652      	lsls	r2, r2, #25
 8004bd8:	4311      	orrs	r1, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bde:	06d2      	lsls	r2, r2, #27
 8004be0:	430a      	orrs	r2, r1
 8004be2:	4943      	ldr	r1, [pc, #268]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be8:	4b41      	ldr	r3, [pc, #260]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a40      	ldr	r2, [pc, #256]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bf2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fd f9fe 	bl	8002000 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c08:	f7fd f9fa 	bl	8002000 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e066      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	4b35      	ldr	r3, [pc, #212]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x530>
 8004c26:	e05e      	b.n	8004ce6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c28:	4b31      	ldr	r3, [pc, #196]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a30      	ldr	r2, [pc, #192]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd f9e4 	bl	8002000 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fd f9e0 	bl	8002000 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e04c      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4e:	4b28      	ldr	r3, [pc, #160]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c5a:	4b25      	ldr	r3, [pc, #148]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	4924      	ldr	r1, [pc, #144]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004c60:	4b25      	ldr	r3, [pc, #148]	@ (8004cf8 <HAL_RCC_OscConfig+0x620>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	60cb      	str	r3, [r1, #12]
 8004c66:	e03e      	b.n	8004ce6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e039      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c74:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf0 <HAL_RCC_OscConfig+0x618>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f003 0203 	and.w	r2, r3, #3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d12c      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	3b01      	subs	r3, #1
 8004c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d123      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d11b      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d113      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	019f800c 	.word	0x019f800c
 8004cf8:	feeefffc 	.word	0xfeeefffc

08004cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e11e      	b.n	8004f52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d14:	4b91      	ldr	r3, [pc, #580]	@ (8004f5c <HAL_RCC_ClockConfig+0x260>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d910      	bls.n	8004d44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b8e      	ldr	r3, [pc, #568]	@ (8004f5c <HAL_RCC_ClockConfig+0x260>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 020f 	bic.w	r2, r3, #15
 8004d2a:	498c      	ldr	r1, [pc, #560]	@ (8004f5c <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b8a      	ldr	r3, [pc, #552]	@ (8004f5c <HAL_RCC_ClockConfig+0x260>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e106      	b.n	8004f52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d073      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d129      	bne.n	8004dac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d58:	4b81      	ldr	r3, [pc, #516]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0f4      	b.n	8004f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d68:	f000 f99e 	bl	80050a8 <RCC_GetSysClockFreqFromPLLSource>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4a7c      	ldr	r2, [pc, #496]	@ (8004f64 <HAL_RCC_ClockConfig+0x268>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d93f      	bls.n	8004df6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d76:	4b7a      	ldr	r3, [pc, #488]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d033      	beq.n	8004df6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d12f      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d96:	4b72      	ldr	r3, [pc, #456]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d9e:	4a70      	ldr	r2, [pc, #448]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e024      	b.n	8004df6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db4:	4b6a      	ldr	r3, [pc, #424]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d109      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0c6      	b.n	8004f52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dc4:	4b66      	ldr	r3, [pc, #408]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0be      	b.n	8004f52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004dd4:	f000 f8ce 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8004dd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4a61      	ldr	r2, [pc, #388]	@ (8004f64 <HAL_RCC_ClockConfig+0x268>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d909      	bls.n	8004df6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004de2:	4b5f      	ldr	r3, [pc, #380]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dea:	4a5d      	ldr	r2, [pc, #372]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004df2:	2380      	movs	r3, #128	@ 0x80
 8004df4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004df6:	4b5a      	ldr	r3, [pc, #360]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f023 0203 	bic.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4957      	ldr	r1, [pc, #348]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e08:	f7fd f8fa 	bl	8002000 <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e10:	f7fd f8f6 	bl	8002000 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e095      	b.n	8004f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e26:	4b4e      	ldr	r3, [pc, #312]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 020c 	and.w	r2, r3, #12
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d1eb      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d023      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e50:	4b43      	ldr	r3, [pc, #268]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4a42      	ldr	r2, [pc, #264]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e68:	4b3d      	ldr	r3, [pc, #244]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e70:	4a3b      	ldr	r2, [pc, #236]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e78:	4b39      	ldr	r3, [pc, #228]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4936      	ldr	r1, [pc, #216]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b80      	cmp	r3, #128	@ 0x80
 8004e90:	d105      	bne.n	8004e9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e92:	4b33      	ldr	r3, [pc, #204]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	4a32      	ldr	r2, [pc, #200]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004e98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8004f5c <HAL_RCC_ClockConfig+0x260>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d21d      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eac:	4b2b      	ldr	r3, [pc, #172]	@ (8004f5c <HAL_RCC_ClockConfig+0x260>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 020f 	bic.w	r2, r3, #15
 8004eb4:	4929      	ldr	r1, [pc, #164]	@ (8004f5c <HAL_RCC_ClockConfig+0x260>)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ebc:	f7fd f8a0 	bl	8002000 <HAL_GetTick>
 8004ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec4:	f7fd f89c 	bl	8002000 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e03b      	b.n	8004f52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_RCC_ClockConfig+0x260>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d1ed      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4917      	ldr	r1, [pc, #92]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f12:	4b13      	ldr	r3, [pc, #76]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	490f      	ldr	r1, [pc, #60]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f26:	f000 f825 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <HAL_RCC_ClockConfig+0x264>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	490c      	ldr	r1, [pc, #48]	@ (8004f68 <HAL_RCC_ClockConfig+0x26c>)
 8004f38:	5ccb      	ldrb	r3, [r1, r3]
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	4a0a      	ldr	r2, [pc, #40]	@ (8004f6c <HAL_RCC_ClockConfig+0x270>)
 8004f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f46:	4b0a      	ldr	r3, [pc, #40]	@ (8004f70 <HAL_RCC_ClockConfig+0x274>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fd f80c 	bl	8001f68 <HAL_InitTick>
 8004f50:	4603      	mov	r3, r0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40021000 	.word	0x40021000
 8004f64:	04c4b400 	.word	0x04c4b400
 8004f68:	08008cbc 	.word	0x08008cbc
 8004f6c:	200000c8 	.word	0x200000c8
 8004f70:	200000cc 	.word	0x200000cc

08004f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800502c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d102      	bne.n	8004f8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f86:	4b2a      	ldr	r3, [pc, #168]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	e047      	b.n	800501c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f8c:	4b27      	ldr	r3, [pc, #156]	@ (800502c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d102      	bne.n	8004f9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f98:	4b26      	ldr	r3, [pc, #152]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	e03e      	b.n	800501c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f9e:	4b23      	ldr	r3, [pc, #140]	@ (800502c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b0c      	cmp	r3, #12
 8004fa8:	d136      	bne.n	8005018 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004faa:	4b20      	ldr	r3, [pc, #128]	@ (800502c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	4a16      	ldr	r2, [pc, #88]	@ (800502c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fd2:	68d2      	ldr	r2, [r2, #12]
 8004fd4:	0a12      	lsrs	r2, r2, #8
 8004fd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
      break;
 8004fe0:	e00c      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fe2:	4a13      	ldr	r2, [pc, #76]	@ (8005030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	4a10      	ldr	r2, [pc, #64]	@ (800502c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fec:	68d2      	ldr	r2, [r2, #12]
 8004fee:	0a12      	lsrs	r2, r2, #8
 8004ff0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]
      break;
 8004ffa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	0e5b      	lsrs	r3, r3, #25
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	3301      	adds	r3, #1
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	e001      	b.n	800501c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800501c:	693b      	ldr	r3, [r7, #16]
}
 800501e:	4618      	mov	r0, r3
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000
 8005030:	00f42400 	.word	0x00f42400
 8005034:	007a1200 	.word	0x007a1200

08005038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800503c:	4b03      	ldr	r3, [pc, #12]	@ (800504c <HAL_RCC_GetHCLKFreq+0x14>)
 800503e:	681b      	ldr	r3, [r3, #0]
}
 8005040:	4618      	mov	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	200000c8 	.word	0x200000c8

08005050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005054:	f7ff fff0 	bl	8005038 <HAL_RCC_GetHCLKFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4904      	ldr	r1, [pc, #16]	@ (8005078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40021000 	.word	0x40021000
 8005078:	08008ccc 	.word	0x08008ccc

0800507c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005080:	f7ff ffda 	bl	8005038 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b06      	ldr	r3, [pc, #24]	@ (80050a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0adb      	lsrs	r3, r3, #11
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4904      	ldr	r1, [pc, #16]	@ (80050a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40021000 	.word	0x40021000
 80050a4:	08008ccc 	.word	0x08008ccc

080050a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	3301      	adds	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d10c      	bne.n	80050e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050cc:	4a17      	ldr	r2, [pc, #92]	@ (800512c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	4a14      	ldr	r2, [pc, #80]	@ (8005128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050d6:	68d2      	ldr	r2, [r2, #12]
 80050d8:	0a12      	lsrs	r2, r2, #8
 80050da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	617b      	str	r3, [r7, #20]
    break;
 80050e4:	e00c      	b.n	8005100 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e6:	4a12      	ldr	r2, [pc, #72]	@ (8005130 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050f0:	68d2      	ldr	r2, [r2, #12]
 80050f2:	0a12      	lsrs	r2, r2, #8
 80050f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050f8:	fb02 f303 	mul.w	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]
    break;
 80050fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005100:	4b09      	ldr	r3, [pc, #36]	@ (8005128 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	0e5b      	lsrs	r3, r3, #25
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	3301      	adds	r3, #1
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800511a:	687b      	ldr	r3, [r7, #4]
}
 800511c:	4618      	mov	r0, r3
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40021000 	.word	0x40021000
 800512c:	007a1200 	.word	0x007a1200
 8005130:	00f42400 	.word	0x00f42400

08005134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800513c:	2300      	movs	r3, #0
 800513e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005140:	2300      	movs	r3, #0
 8005142:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8098 	beq.w	8005282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005152:	2300      	movs	r3, #0
 8005154:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005156:	4b43      	ldr	r3, [pc, #268]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10d      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005162:	4b40      	ldr	r3, [pc, #256]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005166:	4a3f      	ldr	r2, [pc, #252]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800516c:	6593      	str	r3, [r2, #88]	@ 0x58
 800516e:	4b3d      	ldr	r3, [pc, #244]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517a:	2301      	movs	r3, #1
 800517c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800517e:	4b3a      	ldr	r3, [pc, #232]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a39      	ldr	r2, [pc, #228]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005188:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800518a:	f7fc ff39 	bl	8002000 <HAL_GetTick>
 800518e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005190:	e009      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005192:	f7fc ff35 	bl	8002000 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d902      	bls.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	74fb      	strb	r3, [r7, #19]
        break;
 80051a4:	e005      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051a6:	4b30      	ldr	r3, [pc, #192]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ef      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d159      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01e      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d019      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051d4:	4b23      	ldr	r3, [pc, #140]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051e0:	4b20      	ldr	r3, [pc, #128]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005200:	4a18      	ldr	r2, [pc, #96]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d016      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fc fef5 	bl	8002000 <HAL_GetTick>
 8005216:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005218:	e00b      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521a:	f7fc fef1 	bl	8002000 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005228:	4293      	cmp	r3, r2
 800522a:	d902      	bls.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	74fb      	strb	r3, [r7, #19]
            break;
 8005230:	e006      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005232:	4b0c      	ldr	r3, [pc, #48]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0ec      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005246:	4b07      	ldr	r3, [pc, #28]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	4903      	ldr	r1, [pc, #12]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800525c:	e008      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	74bb      	strb	r3, [r7, #18]
 8005262:	e005      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005264:	40021000 	.word	0x40021000
 8005268:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005270:	7c7b      	ldrb	r3, [r7, #17]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005276:	4ba6      	ldr	r3, [pc, #664]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527a:	4aa5      	ldr	r2, [pc, #660]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005280:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800528e:	4ba0      	ldr	r3, [pc, #640]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005294:	f023 0203 	bic.w	r2, r3, #3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	499c      	ldr	r1, [pc, #624]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052b0:	4b97      	ldr	r3, [pc, #604]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b6:	f023 020c 	bic.w	r2, r3, #12
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	4994      	ldr	r1, [pc, #592]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	498b      	ldr	r1, [pc, #556]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052f4:	4b86      	ldr	r3, [pc, #536]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	4983      	ldr	r1, [pc, #524]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005316:	4b7e      	ldr	r3, [pc, #504]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	497a      	ldr	r1, [pc, #488]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005338:	4b75      	ldr	r3, [pc, #468]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	4972      	ldr	r1, [pc, #456]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800535a:	4b6d      	ldr	r3, [pc, #436]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005360:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	4969      	ldr	r1, [pc, #420]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800537c:	4b64      	ldr	r3, [pc, #400]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005382:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	4961      	ldr	r1, [pc, #388]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800539e:	4b5c      	ldr	r3, [pc, #368]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ac:	4958      	ldr	r1, [pc, #352]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d015      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053c0:	4b53      	ldr	r3, [pc, #332]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ce:	4950      	ldr	r1, [pc, #320]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053de:	d105      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d015      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053f8:	4b45      	ldr	r3, [pc, #276]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	4942      	ldr	r1, [pc, #264]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005416:	d105      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005418:	4b3d      	ldr	r3, [pc, #244]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4a3c      	ldr	r2, [pc, #240]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005422:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d015      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005430:	4b37      	ldr	r3, [pc, #220]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005436:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543e:	4934      	ldr	r1, [pc, #208]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800544e:	d105      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005450:	4b2f      	ldr	r3, [pc, #188]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4a2e      	ldr	r2, [pc, #184]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800545a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d015      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005468:	4b29      	ldr	r3, [pc, #164]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005476:	4926      	ldr	r1, [pc, #152]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005486:	d105      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005488:	4b21      	ldr	r3, [pc, #132]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4a20      	ldr	r2, [pc, #128]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005492:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d015      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ae:	4918      	ldr	r1, [pc, #96]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054be:	d105      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c0:	4b13      	ldr	r3, [pc, #76]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a12      	ldr	r2, [pc, #72]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e6:	490a      	ldr	r1, [pc, #40]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054f6:	d105      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4a04      	ldr	r2, [pc, #16]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005502:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005504:	7cbb      	ldrb	r3, [r7, #18]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40021000 	.word	0x40021000

08005514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e049      	b.n	80055ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc fb3a 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f000 fc86 	bl	8005e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d001      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e04a      	b.n	8005672 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a21      	ldr	r2, [pc, #132]	@ (8005680 <HAL_TIM_Base_Start_IT+0xbc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005606:	d013      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1d      	ldr	r2, [pc, #116]	@ (8005684 <HAL_TIM_Base_Start_IT+0xc0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1c      	ldr	r2, [pc, #112]	@ (8005688 <HAL_TIM_Base_Start_IT+0xc4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1a      	ldr	r2, [pc, #104]	@ (800568c <HAL_TIM_Base_Start_IT+0xc8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x6c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a19      	ldr	r2, [pc, #100]	@ (8005690 <HAL_TIM_Base_Start_IT+0xcc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d115      	bne.n	800565c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	4b17      	ldr	r3, [pc, #92]	@ (8005694 <HAL_TIM_Base_Start_IT+0xd0>)
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b06      	cmp	r3, #6
 8005640:	d015      	beq.n	800566e <HAL_TIM_Base_Start_IT+0xaa>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005648:	d011      	beq.n	800566e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565a:	e008      	b.n	800566e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e000      	b.n	8005670 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40013400 	.word	0x40013400
 8005690:	40014000 	.word	0x40014000
 8005694:	00010007 	.word	0x00010007

08005698 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e049      	b.n	800573e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f841 	bl	8005746 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4619      	mov	r1, r3
 80056d6:	4610      	mov	r0, r2
 80056d8:	f000 fbc4 	bl	8005e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d020      	beq.n	80057be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01b      	beq.n	80057be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f06f 0202 	mvn.w	r2, #2
 800578e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fb3f 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 80057aa:	e005      	b.n	80057b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fb31 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fb42 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d020      	beq.n	800580a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01b      	beq.n	800580a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f06f 0204 	mvn.w	r2, #4
 80057da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fb19 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 80057f6:	e005      	b.n	8005804 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fb0b 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fb1c 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d020      	beq.n	8005856 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01b      	beq.n	8005856 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f06f 0208 	mvn.w	r2, #8
 8005826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2204      	movs	r2, #4
 800582c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 faf3 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 8005842:	e005      	b.n	8005850 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fae5 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 faf6 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d020      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b00      	cmp	r3, #0
 8005868:	d01b      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0210 	mvn.w	r2, #16
 8005872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2208      	movs	r2, #8
 8005878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 facd 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 800588e:	e005      	b.n	800589c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fabf 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fad0 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00c      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f06f 0201 	mvn.w	r2, #1
 80058be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7fb fcd9 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 ff72 	bl	80067d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 ff6a 	bl	80067ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00c      	beq.n	800593c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fa8a 	bl	8005e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00c      	beq.n	8005960 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0220 	mvn.w	r2, #32
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 ff32 	bl	80067c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800597c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 ff3e 	bl	8006800 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80059a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 ff36 	bl	8006814 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00c      	beq.n	80059cc <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 ff2e 	bl	8006828 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00c      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 ff26 	bl	800683c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e0ff      	b.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b14      	cmp	r3, #20
 8005a22:	f200 80f0 	bhi.w	8005c06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a26:	a201      	add	r2, pc, #4	@ (adr r2, 8005a2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	08005c07 	.word	0x08005c07
 8005a34:	08005c07 	.word	0x08005c07
 8005a38:	08005c07 	.word	0x08005c07
 8005a3c:	08005ac1 	.word	0x08005ac1
 8005a40:	08005c07 	.word	0x08005c07
 8005a44:	08005c07 	.word	0x08005c07
 8005a48:	08005c07 	.word	0x08005c07
 8005a4c:	08005b03 	.word	0x08005b03
 8005a50:	08005c07 	.word	0x08005c07
 8005a54:	08005c07 	.word	0x08005c07
 8005a58:	08005c07 	.word	0x08005c07
 8005a5c:	08005b43 	.word	0x08005b43
 8005a60:	08005c07 	.word	0x08005c07
 8005a64:	08005c07 	.word	0x08005c07
 8005a68:	08005c07 	.word	0x08005c07
 8005a6c:	08005b85 	.word	0x08005b85
 8005a70:	08005c07 	.word	0x08005c07
 8005a74:	08005c07 	.word	0x08005c07
 8005a78:	08005c07 	.word	0x08005c07
 8005a7c:	08005bc5 	.word	0x08005bc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fa88 	bl	8005f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0208 	orr.w	r2, r2, #8
 8005a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0204 	bic.w	r2, r2, #4
 8005aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6999      	ldr	r1, [r3, #24]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	619a      	str	r2, [r3, #24]
      break;
 8005abe:	e0a5      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 faf8 	bl	80060bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6999      	ldr	r1, [r3, #24]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	021a      	lsls	r2, r3, #8
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	619a      	str	r2, [r3, #24]
      break;
 8005b00:	e084      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fb61 	bl	80061d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0208 	orr.w	r2, r2, #8
 8005b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0204 	bic.w	r2, r2, #4
 8005b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69d9      	ldr	r1, [r3, #28]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	61da      	str	r2, [r3, #28]
      break;
 8005b40:	e064      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fbc9 	bl	80062e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69d9      	ldr	r1, [r3, #28]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	021a      	lsls	r2, r3, #8
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	61da      	str	r2, [r3, #28]
      break;
 8005b82:	e043      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fc32 	bl	80063f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0204 	bic.w	r2, r2, #4
 8005bae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005bc2:	e023      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fc76 	bl	80064bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	021a      	lsls	r2, r3, #8
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c04:	e002      	b.n	8005c0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop

08005c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_TIM_ConfigClockSource+0x1c>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e0de      	b.n	8005dfa <HAL_TIM_ConfigClockSource+0x1da>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005c5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a63      	ldr	r2, [pc, #396]	@ (8005e04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	f000 80a9 	beq.w	8005dce <HAL_TIM_ConfigClockSource+0x1ae>
 8005c7c:	4a61      	ldr	r2, [pc, #388]	@ (8005e04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f200 80ae 	bhi.w	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c84:	4a60      	ldr	r2, [pc, #384]	@ (8005e08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	f000 80a1 	beq.w	8005dce <HAL_TIM_ConfigClockSource+0x1ae>
 8005c8c:	4a5e      	ldr	r2, [pc, #376]	@ (8005e08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	f200 80a6 	bhi.w	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c94:	4a5d      	ldr	r2, [pc, #372]	@ (8005e0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	f000 8099 	beq.w	8005dce <HAL_TIM_ConfigClockSource+0x1ae>
 8005c9c:	4a5b      	ldr	r2, [pc, #364]	@ (8005e0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	f200 809e 	bhi.w	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8005e10 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	f000 8091 	beq.w	8005dce <HAL_TIM_ConfigClockSource+0x1ae>
 8005cac:	4a58      	ldr	r2, [pc, #352]	@ (8005e10 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	f200 8096 	bhi.w	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005cb8:	f000 8089 	beq.w	8005dce <HAL_TIM_ConfigClockSource+0x1ae>
 8005cbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005cc0:	f200 808e 	bhi.w	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cc8:	d03e      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0x128>
 8005cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cce:	f200 8087 	bhi.w	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cd6:	f000 8086 	beq.w	8005de6 <HAL_TIM_ConfigClockSource+0x1c6>
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cde:	d87f      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ce0:	2b70      	cmp	r3, #112	@ 0x70
 8005ce2:	d01a      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0xfa>
 8005ce4:	2b70      	cmp	r3, #112	@ 0x70
 8005ce6:	d87b      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ce8:	2b60      	cmp	r3, #96	@ 0x60
 8005cea:	d050      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x16e>
 8005cec:	2b60      	cmp	r3, #96	@ 0x60
 8005cee:	d877      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cf0:	2b50      	cmp	r3, #80	@ 0x50
 8005cf2:	d03c      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x14e>
 8005cf4:	2b50      	cmp	r3, #80	@ 0x50
 8005cf6:	d873      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cf8:	2b40      	cmp	r3, #64	@ 0x40
 8005cfa:	d058      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x18e>
 8005cfc:	2b40      	cmp	r3, #64	@ 0x40
 8005cfe:	d86f      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d00:	2b30      	cmp	r3, #48	@ 0x30
 8005d02:	d064      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x1ae>
 8005d04:	2b30      	cmp	r3, #48	@ 0x30
 8005d06:	d86b      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d060      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x1ae>
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d867      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d05c      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x1ae>
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	d05a      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x1ae>
 8005d18:	e062      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d2a:	f000 fca9 	bl	8006680 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	609a      	str	r2, [r3, #8]
      break;
 8005d46:	e04f      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d58:	f000 fc92 	bl	8006680 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d6a:	609a      	str	r2, [r3, #8]
      break;
 8005d6c:	e03c      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f000 fc04 	bl	8006588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2150      	movs	r1, #80	@ 0x50
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fc5d 	bl	8006646 <TIM_ITRx_SetConfig>
      break;
 8005d8c:	e02c      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 fc23 	bl	80065e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2160      	movs	r1, #96	@ 0x60
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fc4d 	bl	8006646 <TIM_ITRx_SetConfig>
      break;
 8005dac:	e01c      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 fbe4 	bl	8006588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2140      	movs	r1, #64	@ 0x40
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fc3d 	bl	8006646 <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e00c      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f000 fc34 	bl	8006646 <TIM_ITRx_SetConfig>
      break;
 8005dde:	e003      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
      break;
 8005de4:	e000      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005de6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	00100070 	.word	0x00100070
 8005e08:	00100040 	.word	0x00100040
 8005e0c:	00100030 	.word	0x00100030
 8005e10:	00100020 	.word	0x00100020

08005e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a42      	ldr	r2, [pc, #264]	@ (8005f80 <TIM_Base_SetConfig+0x11c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00f      	beq.n	8005e9c <TIM_Base_SetConfig+0x38>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e82:	d00b      	beq.n	8005e9c <TIM_Base_SetConfig+0x38>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a3f      	ldr	r2, [pc, #252]	@ (8005f84 <TIM_Base_SetConfig+0x120>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d007      	beq.n	8005e9c <TIM_Base_SetConfig+0x38>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8005f88 <TIM_Base_SetConfig+0x124>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_Base_SetConfig+0x38>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a3d      	ldr	r2, [pc, #244]	@ (8005f8c <TIM_Base_SetConfig+0x128>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d108      	bne.n	8005eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a33      	ldr	r2, [pc, #204]	@ (8005f80 <TIM_Base_SetConfig+0x11c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01b      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ebc:	d017      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a30      	ldr	r2, [pc, #192]	@ (8005f84 <TIM_Base_SetConfig+0x120>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8005f88 <TIM_Base_SetConfig+0x124>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8005f8c <TIM_Base_SetConfig+0x128>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8005f90 <TIM_Base_SetConfig+0x12c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f94 <TIM_Base_SetConfig+0x130>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_Base_SetConfig+0x8a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8005f98 <TIM_Base_SetConfig+0x134>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d108      	bne.n	8005f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a16      	ldr	r2, [pc, #88]	@ (8005f80 <TIM_Base_SetConfig+0x11c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00f      	beq.n	8005f4c <TIM_Base_SetConfig+0xe8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a17      	ldr	r2, [pc, #92]	@ (8005f8c <TIM_Base_SetConfig+0x128>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00b      	beq.n	8005f4c <TIM_Base_SetConfig+0xe8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a16      	ldr	r2, [pc, #88]	@ (8005f90 <TIM_Base_SetConfig+0x12c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d007      	beq.n	8005f4c <TIM_Base_SetConfig+0xe8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a15      	ldr	r2, [pc, #84]	@ (8005f94 <TIM_Base_SetConfig+0x130>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_Base_SetConfig+0xe8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a14      	ldr	r2, [pc, #80]	@ (8005f98 <TIM_Base_SetConfig+0x134>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d103      	bne.n	8005f54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d105      	bne.n	8005f72 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f023 0201 	bic.w	r2, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	611a      	str	r2, [r3, #16]
  }
}
 8005f72:	bf00      	nop
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40012c00 	.word	0x40012c00
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40000800 	.word	0x40000800
 8005f8c:	40013400 	.word	0x40013400
 8005f90:	40014000 	.word	0x40014000
 8005f94:	40014400 	.word	0x40014400
 8005f98:	40014800 	.word	0x40014800

08005f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f023 0201 	bic.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0303 	bic.w	r3, r3, #3
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 0302 	bic.w	r3, r3, #2
 8005fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80060a8 <TIM_OC1_SetConfig+0x10c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00f      	beq.n	800601c <TIM_OC1_SetConfig+0x80>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80060ac <TIM_OC1_SetConfig+0x110>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00b      	beq.n	800601c <TIM_OC1_SetConfig+0x80>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a2a      	ldr	r2, [pc, #168]	@ (80060b0 <TIM_OC1_SetConfig+0x114>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_OC1_SetConfig+0x80>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a29      	ldr	r2, [pc, #164]	@ (80060b4 <TIM_OC1_SetConfig+0x118>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_OC1_SetConfig+0x80>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a28      	ldr	r2, [pc, #160]	@ (80060b8 <TIM_OC1_SetConfig+0x11c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d10c      	bne.n	8006036 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 0308 	bic.w	r3, r3, #8
 8006022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f023 0304 	bic.w	r3, r3, #4
 8006034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a1b      	ldr	r2, [pc, #108]	@ (80060a8 <TIM_OC1_SetConfig+0x10c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00f      	beq.n	800605e <TIM_OC1_SetConfig+0xc2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a1a      	ldr	r2, [pc, #104]	@ (80060ac <TIM_OC1_SetConfig+0x110>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_OC1_SetConfig+0xc2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a19      	ldr	r2, [pc, #100]	@ (80060b0 <TIM_OC1_SetConfig+0x114>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d007      	beq.n	800605e <TIM_OC1_SetConfig+0xc2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a18      	ldr	r2, [pc, #96]	@ (80060b4 <TIM_OC1_SetConfig+0x118>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_OC1_SetConfig+0xc2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a17      	ldr	r2, [pc, #92]	@ (80060b8 <TIM_OC1_SetConfig+0x11c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d111      	bne.n	8006082 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800606c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	621a      	str	r2, [r3, #32]
}
 800609c:	bf00      	nop
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40013400 	.word	0x40013400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800

080060bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	f023 0210 	bic.w	r2, r3, #16
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0320 	bic.w	r3, r3, #32
 800610a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a28      	ldr	r2, [pc, #160]	@ (80061bc <TIM_OC2_SetConfig+0x100>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_OC2_SetConfig+0x6c>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a27      	ldr	r2, [pc, #156]	@ (80061c0 <TIM_OC2_SetConfig+0x104>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d10d      	bne.n	8006144 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800612e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006142:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a1d      	ldr	r2, [pc, #116]	@ (80061bc <TIM_OC2_SetConfig+0x100>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00f      	beq.n	800616c <TIM_OC2_SetConfig+0xb0>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a1c      	ldr	r2, [pc, #112]	@ (80061c0 <TIM_OC2_SetConfig+0x104>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00b      	beq.n	800616c <TIM_OC2_SetConfig+0xb0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a1b      	ldr	r2, [pc, #108]	@ (80061c4 <TIM_OC2_SetConfig+0x108>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d007      	beq.n	800616c <TIM_OC2_SetConfig+0xb0>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a1a      	ldr	r2, [pc, #104]	@ (80061c8 <TIM_OC2_SetConfig+0x10c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_OC2_SetConfig+0xb0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a19      	ldr	r2, [pc, #100]	@ (80061cc <TIM_OC2_SetConfig+0x110>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d113      	bne.n	8006194 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800617a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40012c00 	.word	0x40012c00
 80061c0:	40013400 	.word	0x40013400
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40014400 	.word	0x40014400
 80061cc:	40014800 	.word	0x40014800

080061d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0303 	bic.w	r3, r3, #3
 800620a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800621c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a27      	ldr	r2, [pc, #156]	@ (80062cc <TIM_OC3_SetConfig+0xfc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <TIM_OC3_SetConfig+0x6a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a26      	ldr	r2, [pc, #152]	@ (80062d0 <TIM_OC3_SetConfig+0x100>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d10d      	bne.n	8006256 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a1c      	ldr	r2, [pc, #112]	@ (80062cc <TIM_OC3_SetConfig+0xfc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00f      	beq.n	800627e <TIM_OC3_SetConfig+0xae>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a1b      	ldr	r2, [pc, #108]	@ (80062d0 <TIM_OC3_SetConfig+0x100>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00b      	beq.n	800627e <TIM_OC3_SetConfig+0xae>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a1a      	ldr	r2, [pc, #104]	@ (80062d4 <TIM_OC3_SetConfig+0x104>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d007      	beq.n	800627e <TIM_OC3_SetConfig+0xae>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a19      	ldr	r2, [pc, #100]	@ (80062d8 <TIM_OC3_SetConfig+0x108>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d003      	beq.n	800627e <TIM_OC3_SetConfig+0xae>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a18      	ldr	r2, [pc, #96]	@ (80062dc <TIM_OC3_SetConfig+0x10c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d113      	bne.n	80062a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800628c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	621a      	str	r2, [r3, #32]
}
 80062c0:	bf00      	nop
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40013400 	.word	0x40013400
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40014400 	.word	0x40014400
 80062dc:	40014800 	.word	0x40014800

080062e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800631a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800632e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	031b      	lsls	r3, r3, #12
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a28      	ldr	r2, [pc, #160]	@ (80063e0 <TIM_OC4_SetConfig+0x100>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_OC4_SetConfig+0x6c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a27      	ldr	r2, [pc, #156]	@ (80063e4 <TIM_OC4_SetConfig+0x104>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d10d      	bne.n	8006368 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	031b      	lsls	r3, r3, #12
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a1d      	ldr	r2, [pc, #116]	@ (80063e0 <TIM_OC4_SetConfig+0x100>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00f      	beq.n	8006390 <TIM_OC4_SetConfig+0xb0>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a1c      	ldr	r2, [pc, #112]	@ (80063e4 <TIM_OC4_SetConfig+0x104>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00b      	beq.n	8006390 <TIM_OC4_SetConfig+0xb0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1b      	ldr	r2, [pc, #108]	@ (80063e8 <TIM_OC4_SetConfig+0x108>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d007      	beq.n	8006390 <TIM_OC4_SetConfig+0xb0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1a      	ldr	r2, [pc, #104]	@ (80063ec <TIM_OC4_SetConfig+0x10c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d003      	beq.n	8006390 <TIM_OC4_SetConfig+0xb0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a19      	ldr	r2, [pc, #100]	@ (80063f0 <TIM_OC4_SetConfig+0x110>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d113      	bne.n	80063b8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006396:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800639e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	019b      	lsls	r3, r3, #6
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	019b      	lsls	r3, r3, #6
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40012c00 	.word	0x40012c00
 80063e4:	40013400 	.word	0x40013400
 80063e8:	40014000 	.word	0x40014000
 80063ec:	40014400 	.word	0x40014400
 80063f0:	40014800 	.word	0x40014800

080063f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006438:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a17      	ldr	r2, [pc, #92]	@ (80064a8 <TIM_OC5_SetConfig+0xb4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00f      	beq.n	800646e <TIM_OC5_SetConfig+0x7a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a16      	ldr	r2, [pc, #88]	@ (80064ac <TIM_OC5_SetConfig+0xb8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00b      	beq.n	800646e <TIM_OC5_SetConfig+0x7a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a15      	ldr	r2, [pc, #84]	@ (80064b0 <TIM_OC5_SetConfig+0xbc>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <TIM_OC5_SetConfig+0x7a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a14      	ldr	r2, [pc, #80]	@ (80064b4 <TIM_OC5_SetConfig+0xc0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC5_SetConfig+0x7a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a13      	ldr	r2, [pc, #76]	@ (80064b8 <TIM_OC5_SetConfig+0xc4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d109      	bne.n	8006482 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006474:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	021b      	lsls	r3, r3, #8
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40012c00 	.word	0x40012c00
 80064ac:	40013400 	.word	0x40013400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800

080064bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	021b      	lsls	r3, r3, #8
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	051b      	lsls	r3, r3, #20
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a18      	ldr	r2, [pc, #96]	@ (8006574 <TIM_OC6_SetConfig+0xb8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00f      	beq.n	8006538 <TIM_OC6_SetConfig+0x7c>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a17      	ldr	r2, [pc, #92]	@ (8006578 <TIM_OC6_SetConfig+0xbc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_OC6_SetConfig+0x7c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a16      	ldr	r2, [pc, #88]	@ (800657c <TIM_OC6_SetConfig+0xc0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_OC6_SetConfig+0x7c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <TIM_OC6_SetConfig+0xc4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_OC6_SetConfig+0x7c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a14      	ldr	r2, [pc, #80]	@ (8006584 <TIM_OC6_SetConfig+0xc8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d109      	bne.n	800654c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800653e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	029b      	lsls	r3, r3, #10
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	621a      	str	r2, [r3, #32]
}
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00
 8006578:	40013400 	.word	0x40013400
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400
 8006584:	40014800 	.word	0x40014800

08006588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f023 0201 	bic.w	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f023 030a 	bic.w	r3, r3, #10
 80065c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	621a      	str	r2, [r3, #32]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b087      	sub	sp, #28
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f023 0210 	bic.w	r2, r3, #16
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	031b      	lsls	r3, r3, #12
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006622:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800665c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	f043 0307 	orr.w	r3, r3, #7
 800666c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	609a      	str	r2, [r3, #8]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800669a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	021a      	lsls	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	609a      	str	r2, [r3, #8]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e065      	b.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a2c      	ldr	r2, [pc, #176]	@ (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a2b      	ldr	r2, [pc, #172]	@ (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d108      	bne.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006712:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006728:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1b      	ldr	r2, [pc, #108]	@ (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d018      	beq.n	8006778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800674e:	d013      	beq.n	8006778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a18      	ldr	r2, [pc, #96]	@ (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00e      	beq.n	8006778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a17      	ldr	r2, [pc, #92]	@ (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d009      	beq.n	8006778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a12      	ldr	r2, [pc, #72]	@ (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a13      	ldr	r2, [pc, #76]	@ (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d10c      	bne.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800677e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	4313      	orrs	r3, r2
 8006788:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40013400 	.word	0x40013400
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	40014000 	.word	0x40014000

080067c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e042      	b.n	80068e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006868:	2b00      	cmp	r3, #0
 800686a:	d106      	bne.n	800687a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7fb f9f9 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2224      	movs	r2, #36	@ 0x24
 800687e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fec4 	bl	8007628 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fbf5 	bl	8007090 <UART_SetConfig>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e01b      	b.n	80068e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 ff43 	bl	800776c <UART_CheckIdleState>
 80068e6:	4603      	mov	r3, r0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	@ 0x28
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006906:	2b20      	cmp	r3, #32
 8006908:	d17b      	bne.n	8006a02 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_UART_Transmit+0x26>
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e074      	b.n	8006a04 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2221      	movs	r2, #33	@ 0x21
 8006926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800692a:	f7fb fb69 	bl	8002000 <HAL_GetTick>
 800692e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006948:	d108      	bne.n	800695c <HAL_UART_Transmit+0x6c>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	61bb      	str	r3, [r7, #24]
 800695a:	e003      	b.n	8006964 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006960:	2300      	movs	r3, #0
 8006962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006964:	e030      	b.n	80069c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2200      	movs	r2, #0
 800696e:	2180      	movs	r1, #128	@ 0x80
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 ffa5 	bl	80078c0 <UART_WaitOnFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2220      	movs	r2, #32
 8006980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e03d      	b.n	8006a04 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800699c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	3302      	adds	r3, #2
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e007      	b.n	80069b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	781a      	ldrb	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	3301      	adds	r3, #1
 80069b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1c8      	bne.n	8006966 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2200      	movs	r2, #0
 80069dc:	2140      	movs	r1, #64	@ 0x40
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 ff6e 	bl	80078c0 <UART_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e006      	b.n	8006a04 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e000      	b.n	8006a04 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006a02:	2302      	movs	r3, #2
  }
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3720      	adds	r7, #32
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b0ba      	sub	sp, #232	@ 0xe8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11b      	bne.n	8006a80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d009      	beq.n	8006a80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 82e3 	beq.w	800703c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	4798      	blx	r3
      }
      return;
 8006a7e:	e2dd      	b.n	800703c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8123 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8006cc4 <HAL_UART_IRQHandler+0x2b8>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a9a:	4b8b      	ldr	r3, [pc, #556]	@ (8006cc8 <HAL_UART_IRQHandler+0x2bc>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8116 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d011      	beq.n	8006ad4 <HAL_UART_IRQHandler+0xc8>
 8006ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aca:	f043 0201 	orr.w	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d011      	beq.n	8006b04 <HAL_UART_IRQHandler+0xf8>
 8006ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00b      	beq.n	8006b04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2202      	movs	r2, #2
 8006af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afa:	f043 0204 	orr.w	r2, r3, #4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d011      	beq.n	8006b34 <HAL_UART_IRQHandler+0x128>
 8006b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2204      	movs	r2, #4
 8006b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2a:	f043 0202 	orr.w	r2, r3, #2
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d017      	beq.n	8006b70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b50:	4b5c      	ldr	r3, [pc, #368]	@ (8006cc4 <HAL_UART_IRQHandler+0x2b8>)
 8006b52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b66:	f043 0208 	orr.w	r2, r3, #8
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d012      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x196>
 8006b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00c      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b98:	f043 0220 	orr.w	r2, r3, #32
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 8249 	beq.w	8007040 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d013      	beq.n	8006be2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf6:	2b40      	cmp	r3, #64	@ 0x40
 8006bf8:	d005      	beq.n	8006c06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bfe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d054      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 ffea 	bl	8007be0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c16:	2b40      	cmp	r3, #64	@ 0x40
 8006c18:	d146      	bne.n	8006ca8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1d9      	bne.n	8006c1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d017      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c76:	4a15      	ldr	r2, [pc, #84]	@ (8006ccc <HAL_UART_IRQHandler+0x2c0>)
 8006c78:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fd f90b 	bl	8003e9c <HAL_DMA_Abort_IT>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d019      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9e:	e00f      	b.n	8006cc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f9eb 	bl	800707c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca6:	e00b      	b.n	8006cc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f9e7 	bl	800707c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cae:	e007      	b.n	8006cc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f9e3 	bl	800707c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006cbe:	e1bf      	b.n	8007040 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	bf00      	nop
    return;
 8006cc2:	e1bd      	b.n	8007040 <HAL_UART_IRQHandler+0x634>
 8006cc4:	10000001 	.word	0x10000001
 8006cc8:	04000120 	.word	0x04000120
 8006ccc:	08007cad 	.word	0x08007cad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	f040 8153 	bne.w	8006f80 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 814c 	beq.w	8006f80 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cec:	f003 0310 	and.w	r3, r3, #16
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8145 	beq.w	8006f80 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b40      	cmp	r3, #64	@ 0x40
 8006d0a:	f040 80bb 	bne.w	8006e84 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 818f 	beq.w	8007044 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d30:	429a      	cmp	r2, r3
 8006d32:	f080 8187 	bcs.w	8007044 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f040 8087 	bne.w	8006e62 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d82:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1da      	bne.n	8006d54 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e1      	bne.n	8006d9e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006dfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e3      	bne.n	8006dda <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e30:	f023 0310 	bic.w	r3, r3, #16
 8006e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e4      	bne.n	8006e20 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fc ffc4 	bl	8003dea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fa f997 	bl	80011b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e82:	e0df      	b.n	8007044 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80d1 	beq.w	8007048 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006ea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 80cc 	beq.w	8007048 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ed4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e4      	bne.n	8006eb0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3308      	adds	r3, #8
 8006eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e1      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0310 	bic.w	r3, r3, #16
 8006f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	617b      	str	r3, [r7, #20]
   return(result);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e4      	bne.n	8006f36 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fa f919 	bl	80011b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f7e:	e063      	b.n	8007048 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <HAL_UART_IRQHandler+0x59e>
 8006f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006fa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fbe0 	bl	8008768 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fa8:	e051      	b.n	800704e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d014      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d105      	bne.n	8006fce <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d008      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d03a      	beq.n	800704c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
    }
    return;
 8006fde:	e035      	b.n	800704c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d009      	beq.n	8007000 <HAL_UART_IRQHandler+0x5f4>
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fe6d 	bl	8007cd8 <UART_EndTransmit_IT>
    return;
 8006ffe:	e026      	b.n	800704e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d009      	beq.n	8007020 <HAL_UART_IRQHandler+0x614>
 800700c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007010:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fbb9 	bl	8008790 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800701e:	e016      	b.n	800704e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d010      	beq.n	800704e <HAL_UART_IRQHandler+0x642>
 800702c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007030:	2b00      	cmp	r3, #0
 8007032:	da0c      	bge.n	800704e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fba1 	bl	800877c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800703a:	e008      	b.n	800704e <HAL_UART_IRQHandler+0x642>
      return;
 800703c:	bf00      	nop
 800703e:	e006      	b.n	800704e <HAL_UART_IRQHandler+0x642>
    return;
 8007040:	bf00      	nop
 8007042:	e004      	b.n	800704e <HAL_UART_IRQHandler+0x642>
      return;
 8007044:	bf00      	nop
 8007046:	e002      	b.n	800704e <HAL_UART_IRQHandler+0x642>
      return;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <HAL_UART_IRQHandler+0x642>
    return;
 800704c:	bf00      	nop
  }
}
 800704e:	37e8      	adds	r7, #232	@ 0xe8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007094:	b08c      	sub	sp, #48	@ 0x30
 8007096:	af00      	add	r7, sp, #0
 8007098:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	431a      	orrs	r2, r3
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	431a      	orrs	r2, r3
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4bab      	ldr	r3, [pc, #684]	@ (800736c <UART_SetConfig+0x2dc>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4aa0      	ldr	r2, [pc, #640]	@ (8007370 <UART_SetConfig+0x2e0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070f8:	4313      	orrs	r3, r2
 80070fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007106:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007110:	430b      	orrs	r3, r1
 8007112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711a:	f023 010f 	bic.w	r1, r3, #15
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a91      	ldr	r2, [pc, #580]	@ (8007374 <UART_SetConfig+0x2e4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d125      	bne.n	8007180 <UART_SetConfig+0xf0>
 8007134:	4b90      	ldr	r3, [pc, #576]	@ (8007378 <UART_SetConfig+0x2e8>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	2b03      	cmp	r3, #3
 8007140:	d81a      	bhi.n	8007178 <UART_SetConfig+0xe8>
 8007142:	a201      	add	r2, pc, #4	@ (adr r2, 8007148 <UART_SetConfig+0xb8>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	08007159 	.word	0x08007159
 800714c:	08007169 	.word	0x08007169
 8007150:	08007161 	.word	0x08007161
 8007154:	08007171 	.word	0x08007171
 8007158:	2301      	movs	r3, #1
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800715e:	e0d6      	b.n	800730e <UART_SetConfig+0x27e>
 8007160:	2302      	movs	r3, #2
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007166:	e0d2      	b.n	800730e <UART_SetConfig+0x27e>
 8007168:	2304      	movs	r3, #4
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716e:	e0ce      	b.n	800730e <UART_SetConfig+0x27e>
 8007170:	2308      	movs	r3, #8
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007176:	e0ca      	b.n	800730e <UART_SetConfig+0x27e>
 8007178:	2310      	movs	r3, #16
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717e:	e0c6      	b.n	800730e <UART_SetConfig+0x27e>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a7d      	ldr	r2, [pc, #500]	@ (800737c <UART_SetConfig+0x2ec>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d138      	bne.n	80071fc <UART_SetConfig+0x16c>
 800718a:	4b7b      	ldr	r3, [pc, #492]	@ (8007378 <UART_SetConfig+0x2e8>)
 800718c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007190:	f003 030c 	and.w	r3, r3, #12
 8007194:	2b0c      	cmp	r3, #12
 8007196:	d82d      	bhi.n	80071f4 <UART_SetConfig+0x164>
 8007198:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <UART_SetConfig+0x110>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080071f5 	.word	0x080071f5
 80071a8:	080071f5 	.word	0x080071f5
 80071ac:	080071f5 	.word	0x080071f5
 80071b0:	080071e5 	.word	0x080071e5
 80071b4:	080071f5 	.word	0x080071f5
 80071b8:	080071f5 	.word	0x080071f5
 80071bc:	080071f5 	.word	0x080071f5
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071f5 	.word	0x080071f5
 80071c8:	080071f5 	.word	0x080071f5
 80071cc:	080071f5 	.word	0x080071f5
 80071d0:	080071ed 	.word	0x080071ed
 80071d4:	2300      	movs	r3, #0
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071da:	e098      	b.n	800730e <UART_SetConfig+0x27e>
 80071dc:	2302      	movs	r3, #2
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e094      	b.n	800730e <UART_SetConfig+0x27e>
 80071e4:	2304      	movs	r3, #4
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e090      	b.n	800730e <UART_SetConfig+0x27e>
 80071ec:	2308      	movs	r3, #8
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f2:	e08c      	b.n	800730e <UART_SetConfig+0x27e>
 80071f4:	2310      	movs	r3, #16
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fa:	e088      	b.n	800730e <UART_SetConfig+0x27e>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a5f      	ldr	r2, [pc, #380]	@ (8007380 <UART_SetConfig+0x2f0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d125      	bne.n	8007252 <UART_SetConfig+0x1c2>
 8007206:	4b5c      	ldr	r3, [pc, #368]	@ (8007378 <UART_SetConfig+0x2e8>)
 8007208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007210:	2b30      	cmp	r3, #48	@ 0x30
 8007212:	d016      	beq.n	8007242 <UART_SetConfig+0x1b2>
 8007214:	2b30      	cmp	r3, #48	@ 0x30
 8007216:	d818      	bhi.n	800724a <UART_SetConfig+0x1ba>
 8007218:	2b20      	cmp	r3, #32
 800721a:	d00a      	beq.n	8007232 <UART_SetConfig+0x1a2>
 800721c:	2b20      	cmp	r3, #32
 800721e:	d814      	bhi.n	800724a <UART_SetConfig+0x1ba>
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <UART_SetConfig+0x19a>
 8007224:	2b10      	cmp	r3, #16
 8007226:	d008      	beq.n	800723a <UART_SetConfig+0x1aa>
 8007228:	e00f      	b.n	800724a <UART_SetConfig+0x1ba>
 800722a:	2300      	movs	r3, #0
 800722c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007230:	e06d      	b.n	800730e <UART_SetConfig+0x27e>
 8007232:	2302      	movs	r3, #2
 8007234:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007238:	e069      	b.n	800730e <UART_SetConfig+0x27e>
 800723a:	2304      	movs	r3, #4
 800723c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007240:	e065      	b.n	800730e <UART_SetConfig+0x27e>
 8007242:	2308      	movs	r3, #8
 8007244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007248:	e061      	b.n	800730e <UART_SetConfig+0x27e>
 800724a:	2310      	movs	r3, #16
 800724c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007250:	e05d      	b.n	800730e <UART_SetConfig+0x27e>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a4b      	ldr	r2, [pc, #300]	@ (8007384 <UART_SetConfig+0x2f4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d125      	bne.n	80072a8 <UART_SetConfig+0x218>
 800725c:	4b46      	ldr	r3, [pc, #280]	@ (8007378 <UART_SetConfig+0x2e8>)
 800725e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007262:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007266:	2bc0      	cmp	r3, #192	@ 0xc0
 8007268:	d016      	beq.n	8007298 <UART_SetConfig+0x208>
 800726a:	2bc0      	cmp	r3, #192	@ 0xc0
 800726c:	d818      	bhi.n	80072a0 <UART_SetConfig+0x210>
 800726e:	2b80      	cmp	r3, #128	@ 0x80
 8007270:	d00a      	beq.n	8007288 <UART_SetConfig+0x1f8>
 8007272:	2b80      	cmp	r3, #128	@ 0x80
 8007274:	d814      	bhi.n	80072a0 <UART_SetConfig+0x210>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <UART_SetConfig+0x1f0>
 800727a:	2b40      	cmp	r3, #64	@ 0x40
 800727c:	d008      	beq.n	8007290 <UART_SetConfig+0x200>
 800727e:	e00f      	b.n	80072a0 <UART_SetConfig+0x210>
 8007280:	2300      	movs	r3, #0
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007286:	e042      	b.n	800730e <UART_SetConfig+0x27e>
 8007288:	2302      	movs	r3, #2
 800728a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728e:	e03e      	b.n	800730e <UART_SetConfig+0x27e>
 8007290:	2304      	movs	r3, #4
 8007292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007296:	e03a      	b.n	800730e <UART_SetConfig+0x27e>
 8007298:	2308      	movs	r3, #8
 800729a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729e:	e036      	b.n	800730e <UART_SetConfig+0x27e>
 80072a0:	2310      	movs	r3, #16
 80072a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a6:	e032      	b.n	800730e <UART_SetConfig+0x27e>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a30      	ldr	r2, [pc, #192]	@ (8007370 <UART_SetConfig+0x2e0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d12a      	bne.n	8007308 <UART_SetConfig+0x278>
 80072b2:	4b31      	ldr	r3, [pc, #196]	@ (8007378 <UART_SetConfig+0x2e8>)
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072c0:	d01a      	beq.n	80072f8 <UART_SetConfig+0x268>
 80072c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072c6:	d81b      	bhi.n	8007300 <UART_SetConfig+0x270>
 80072c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072cc:	d00c      	beq.n	80072e8 <UART_SetConfig+0x258>
 80072ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d2:	d815      	bhi.n	8007300 <UART_SetConfig+0x270>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <UART_SetConfig+0x250>
 80072d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072dc:	d008      	beq.n	80072f0 <UART_SetConfig+0x260>
 80072de:	e00f      	b.n	8007300 <UART_SetConfig+0x270>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072e6:	e012      	b.n	800730e <UART_SetConfig+0x27e>
 80072e8:	2302      	movs	r3, #2
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ee:	e00e      	b.n	800730e <UART_SetConfig+0x27e>
 80072f0:	2304      	movs	r3, #4
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f6:	e00a      	b.n	800730e <UART_SetConfig+0x27e>
 80072f8:	2308      	movs	r3, #8
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fe:	e006      	b.n	800730e <UART_SetConfig+0x27e>
 8007300:	2310      	movs	r3, #16
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007306:	e002      	b.n	800730e <UART_SetConfig+0x27e>
 8007308:	2310      	movs	r3, #16
 800730a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a17      	ldr	r2, [pc, #92]	@ (8007370 <UART_SetConfig+0x2e0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	f040 80a8 	bne.w	800746a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800731a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800731e:	2b08      	cmp	r3, #8
 8007320:	d834      	bhi.n	800738c <UART_SetConfig+0x2fc>
 8007322:	a201      	add	r2, pc, #4	@ (adr r2, 8007328 <UART_SetConfig+0x298>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	0800734d 	.word	0x0800734d
 800732c:	0800738d 	.word	0x0800738d
 8007330:	08007355 	.word	0x08007355
 8007334:	0800738d 	.word	0x0800738d
 8007338:	0800735b 	.word	0x0800735b
 800733c:	0800738d 	.word	0x0800738d
 8007340:	0800738d 	.word	0x0800738d
 8007344:	0800738d 	.word	0x0800738d
 8007348:	08007363 	.word	0x08007363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800734c:	f7fd fe80 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 8007350:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007352:	e021      	b.n	8007398 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007354:	4b0c      	ldr	r3, [pc, #48]	@ (8007388 <UART_SetConfig+0x2f8>)
 8007356:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007358:	e01e      	b.n	8007398 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735a:	f7fd fe0b 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 800735e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007360:	e01a      	b.n	8007398 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007366:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007368:	e016      	b.n	8007398 <UART_SetConfig+0x308>
 800736a:	bf00      	nop
 800736c:	cfff69f3 	.word	0xcfff69f3
 8007370:	40008000 	.word	0x40008000
 8007374:	40013800 	.word	0x40013800
 8007378:	40021000 	.word	0x40021000
 800737c:	40004400 	.word	0x40004400
 8007380:	40004800 	.word	0x40004800
 8007384:	40004c00 	.word	0x40004c00
 8007388:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007396:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 812a 	beq.w	80075f4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a4:	4a9e      	ldr	r2, [pc, #632]	@ (8007620 <UART_SetConfig+0x590>)
 80073a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073aa:	461a      	mov	r2, r3
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80073b2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	4613      	mov	r3, r2
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	4413      	add	r3, r2
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d305      	bcc.n	80073d0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d903      	bls.n	80073d8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073d6:	e10d      	b.n	80075f4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	2200      	movs	r2, #0
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	60fa      	str	r2, [r7, #12]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e4:	4a8e      	ldr	r2, [pc, #568]	@ (8007620 <UART_SetConfig+0x590>)
 80073e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2200      	movs	r2, #0
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073fa:	f7f9 fafb 	bl	80009f4 <__aeabi_uldivmod>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	020b      	lsls	r3, r1, #8
 8007410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007414:	0202      	lsls	r2, r0, #8
 8007416:	6979      	ldr	r1, [r7, #20]
 8007418:	6849      	ldr	r1, [r1, #4]
 800741a:	0849      	lsrs	r1, r1, #1
 800741c:	2000      	movs	r0, #0
 800741e:	460c      	mov	r4, r1
 8007420:	4605      	mov	r5, r0
 8007422:	eb12 0804 	adds.w	r8, r2, r4
 8007426:	eb43 0905 	adc.w	r9, r3, r5
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	469a      	mov	sl, r3
 8007432:	4693      	mov	fp, r2
 8007434:	4652      	mov	r2, sl
 8007436:	465b      	mov	r3, fp
 8007438:	4640      	mov	r0, r8
 800743a:	4649      	mov	r1, r9
 800743c:	f7f9 fada 	bl	80009f4 <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4613      	mov	r3, r2
 8007446:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800744e:	d308      	bcc.n	8007462 <UART_SetConfig+0x3d2>
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007456:	d204      	bcs.n	8007462 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	60da      	str	r2, [r3, #12]
 8007460:	e0c8      	b.n	80075f4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007468:	e0c4      	b.n	80075f4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007472:	d167      	bne.n	8007544 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007474:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007478:	2b08      	cmp	r3, #8
 800747a:	d828      	bhi.n	80074ce <UART_SetConfig+0x43e>
 800747c:	a201      	add	r2, pc, #4	@ (adr r2, 8007484 <UART_SetConfig+0x3f4>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080074a9 	.word	0x080074a9
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074b9 	.word	0x080074b9
 8007490:	080074cf 	.word	0x080074cf
 8007494:	080074bf 	.word	0x080074bf
 8007498:	080074cf 	.word	0x080074cf
 800749c:	080074cf 	.word	0x080074cf
 80074a0:	080074cf 	.word	0x080074cf
 80074a4:	080074c7 	.word	0x080074c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a8:	f7fd fdd2 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 80074ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ae:	e014      	b.n	80074da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b0:	f7fd fde4 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 80074b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074b6:	e010      	b.n	80074da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007624 <UART_SetConfig+0x594>)
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074bc:	e00d      	b.n	80074da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074be:	f7fd fd59 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 80074c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074c4:	e009      	b.n	80074da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074cc:	e005      	b.n	80074da <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 8089 	beq.w	80075f4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e6:	4a4e      	ldr	r2, [pc, #312]	@ (8007620 <UART_SetConfig+0x590>)
 80074e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f4:	005a      	lsls	r2, r3, #1
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	441a      	add	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	fbb2 f3f3 	udiv	r3, r2, r3
 8007506:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b0f      	cmp	r3, #15
 800750c:	d916      	bls.n	800753c <UART_SetConfig+0x4ac>
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007514:	d212      	bcs.n	800753c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f023 030f 	bic.w	r3, r3, #15
 800751e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	b29b      	uxth	r3, r3
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	b29a      	uxth	r2, r3
 800752c:	8bfb      	ldrh	r3, [r7, #30]
 800752e:	4313      	orrs	r3, r2
 8007530:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	8bfa      	ldrh	r2, [r7, #30]
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	e05b      	b.n	80075f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007542:	e057      	b.n	80075f4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007544:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007548:	2b08      	cmp	r3, #8
 800754a:	d828      	bhi.n	800759e <UART_SetConfig+0x50e>
 800754c:	a201      	add	r2, pc, #4	@ (adr r2, 8007554 <UART_SetConfig+0x4c4>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	08007579 	.word	0x08007579
 8007558:	08007581 	.word	0x08007581
 800755c:	08007589 	.word	0x08007589
 8007560:	0800759f 	.word	0x0800759f
 8007564:	0800758f 	.word	0x0800758f
 8007568:	0800759f 	.word	0x0800759f
 800756c:	0800759f 	.word	0x0800759f
 8007570:	0800759f 	.word	0x0800759f
 8007574:	08007597 	.word	0x08007597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007578:	f7fd fd6a 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 800757c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800757e:	e014      	b.n	80075aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007580:	f7fd fd7c 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 8007584:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007586:	e010      	b.n	80075aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007588:	4b26      	ldr	r3, [pc, #152]	@ (8007624 <UART_SetConfig+0x594>)
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800758c:	e00d      	b.n	80075aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800758e:	f7fd fcf1 	bl	8004f74 <HAL_RCC_GetSysClockFreq>
 8007592:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007594:	e009      	b.n	80075aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800759a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800759c:	e005      	b.n	80075aa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075a8:	bf00      	nop
    }

    if (pclk != 0U)
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d021      	beq.n	80075f4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007620 <UART_SetConfig+0x590>)
 80075b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075ba:	461a      	mov	r2, r3
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	fbb3 f2f2 	udiv	r2, r3, r2
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	441a      	add	r2, r3
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d909      	bls.n	80075ee <UART_SetConfig+0x55e>
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e0:	d205      	bcs.n	80075ee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60da      	str	r2, [r3, #12]
 80075ec:	e002      	b.n	80075f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2201      	movs	r2, #1
 8007600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2200      	movs	r2, #0
 8007608:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2200      	movs	r2, #0
 800760e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007610:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007614:	4618      	mov	r0, r3
 8007616:	3730      	adds	r7, #48	@ 0x30
 8007618:	46bd      	mov	sp, r7
 800761a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800761e:	bf00      	nop
 8007620:	08008cd4 	.word	0x08008cd4
 8007624:	00f42400 	.word	0x00f42400

08007628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01a      	beq.n	800773e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007726:	d10a      	bne.n	800773e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	605a      	str	r2, [r3, #4]
  }
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b098      	sub	sp, #96	@ 0x60
 8007770:	af02      	add	r7, sp, #8
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800777c:	f7fa fc40 	bl	8002000 <HAL_GetTick>
 8007780:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b08      	cmp	r3, #8
 800778e:	d12f      	bne.n	80077f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007790:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007798:	2200      	movs	r2, #0
 800779a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f88e 	bl	80078c0 <UART_WaitOnFlagUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d022      	beq.n	80077f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077be:	653b      	str	r3, [r7, #80]	@ 0x50
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e6      	bne.n	80077aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e063      	b.n	80078b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d149      	bne.n	8007892 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007806:	2200      	movs	r2, #0
 8007808:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f857 	bl	80078c0 <UART_WaitOnFlagUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d03c      	beq.n	8007892 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	623b      	str	r3, [r7, #32]
   return(result);
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800782c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007836:	633b      	str	r3, [r7, #48]	@ 0x30
 8007838:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800783c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e6      	bne.n	8007818 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	60fb      	str	r3, [r7, #12]
   return(result);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800786a:	61fa      	str	r2, [r7, #28]
 800786c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	69b9      	ldr	r1, [r7, #24]
 8007870:	69fa      	ldr	r2, [r7, #28]
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	617b      	str	r3, [r7, #20]
   return(result);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e5      	bne.n	800784a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e012      	b.n	80078b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3758      	adds	r7, #88	@ 0x58
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	4613      	mov	r3, r2
 80078ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d0:	e04f      	b.n	8007972 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078d8:	d04b      	beq.n	8007972 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078da:	f7fa fb91 	bl	8002000 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d302      	bcc.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e04e      	b.n	8007992 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d037      	beq.n	8007972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b80      	cmp	r3, #128	@ 0x80
 8007906:	d034      	beq.n	8007972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b40      	cmp	r3, #64	@ 0x40
 800790c:	d031      	beq.n	8007972 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b08      	cmp	r3, #8
 800791a:	d110      	bne.n	800793e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2208      	movs	r2, #8
 8007922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f95b 	bl	8007be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2208      	movs	r2, #8
 800792e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e029      	b.n	8007992 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800794c:	d111      	bne.n	8007972 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f941 	bl	8007be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e00f      	b.n	8007992 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69da      	ldr	r2, [r3, #28]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4013      	ands	r3, r2
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	429a      	cmp	r2, r3
 8007980:	bf0c      	ite	eq
 8007982:	2301      	moveq	r3, #1
 8007984:	2300      	movne	r3, #0
 8007986:	b2db      	uxtb	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	429a      	cmp	r2, r3
 800798e:	d0a0      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800799c:	b480      	push	{r7}
 800799e:	b0a3      	sub	sp, #140	@ 0x8c
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	88fa      	ldrh	r2, [r7, #6]
 80079b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	88fa      	ldrh	r2, [r7, #6]
 80079bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ce:	d10e      	bne.n	80079ee <UART_Start_Receive_IT+0x52>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d105      	bne.n	80079e4 <UART_Start_Receive_IT+0x48>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80079de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079e2:	e02d      	b.n	8007a40 <UART_Start_Receive_IT+0xa4>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	22ff      	movs	r2, #255	@ 0xff
 80079e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80079ec:	e028      	b.n	8007a40 <UART_Start_Receive_IT+0xa4>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10d      	bne.n	8007a12 <UART_Start_Receive_IT+0x76>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d104      	bne.n	8007a08 <UART_Start_Receive_IT+0x6c>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	22ff      	movs	r2, #255	@ 0xff
 8007a02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a06:	e01b      	b.n	8007a40 <UART_Start_Receive_IT+0xa4>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	227f      	movs	r2, #127	@ 0x7f
 8007a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a10:	e016      	b.n	8007a40 <UART_Start_Receive_IT+0xa4>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a1a:	d10d      	bne.n	8007a38 <UART_Start_Receive_IT+0x9c>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d104      	bne.n	8007a2e <UART_Start_Receive_IT+0x92>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	227f      	movs	r2, #127	@ 0x7f
 8007a28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a2c:	e008      	b.n	8007a40 <UART_Start_Receive_IT+0xa4>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	223f      	movs	r2, #63	@ 0x3f
 8007a32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007a36:	e003      	b.n	8007a40 <UART_Start_Receive_IT+0xa4>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2222      	movs	r2, #34	@ 0x22
 8007a4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3308      	adds	r3, #8
 8007a56:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007a60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a62:	f043 0301 	orr.w	r3, r3, #1
 8007a66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007a74:	673a      	str	r2, [r7, #112]	@ 0x70
 8007a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007a7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007a82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e3      	bne.n	8007a50 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a90:	d14f      	bne.n	8007b32 <UART_Start_Receive_IT+0x196>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d349      	bcc.n	8007b32 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa6:	d107      	bne.n	8007ab8 <UART_Start_Receive_IT+0x11c>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d103      	bne.n	8007ab8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a47      	ldr	r2, [pc, #284]	@ (8007bd0 <UART_Start_Receive_IT+0x234>)
 8007ab4:	675a      	str	r2, [r3, #116]	@ 0x74
 8007ab6:	e002      	b.n	8007abe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4a46      	ldr	r2, [pc, #280]	@ (8007bd4 <UART_Start_Receive_IT+0x238>)
 8007abc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01a      	beq.n	8007afc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ada:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007aee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007af0:	e841 2300 	strex	r3, r2, [r1]
 8007af4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e4      	bne.n	8007ac6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007b1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e5      	bne.n	8007afc <UART_Start_Receive_IT+0x160>
 8007b30:	e046      	b.n	8007bc0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b3a:	d107      	bne.n	8007b4c <UART_Start_Receive_IT+0x1b0>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d103      	bne.n	8007b4c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4a24      	ldr	r2, [pc, #144]	@ (8007bd8 <UART_Start_Receive_IT+0x23c>)
 8007b48:	675a      	str	r2, [r3, #116]	@ 0x74
 8007b4a:	e002      	b.n	8007b52 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4a23      	ldr	r2, [pc, #140]	@ (8007bdc <UART_Start_Receive_IT+0x240>)
 8007b50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d019      	beq.n	8007b8e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007b6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	461a      	mov	r2, r3
 8007b76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b7a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e6      	bne.n	8007b5a <UART_Start_Receive_IT+0x1be>
 8007b8c:	e018      	b.n	8007bc0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f043 0320 	orr.w	r3, r3, #32
 8007ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bac:	623b      	str	r3, [r7, #32]
 8007bae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	69f9      	ldr	r1, [r7, #28]
 8007bb2:	6a3a      	ldr	r2, [r7, #32]
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e6      	bne.n	8007b8e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	378c      	adds	r7, #140	@ 0x8c
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	08008401 	.word	0x08008401
 8007bd4:	080080a1 	.word	0x080080a1
 8007bd8:	08007ee9 	.word	0x08007ee9
 8007bdc:	08007d31 	.word	0x08007d31

08007be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b095      	sub	sp, #84	@ 0x54
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c06:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e6      	bne.n	8007be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e3      	bne.n	8007c1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d118      	bne.n	8007c8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f023 0310 	bic.w	r3, r3, #16
 8007c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6979      	ldr	r1, [r7, #20]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	613b      	str	r3, [r7, #16]
   return(result);
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e6      	bne.n	8007c5a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ca0:	bf00      	nop
 8007ca2:	3754      	adds	r7, #84	@ 0x54
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff f9d6 	bl	800707c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	e853 3f00 	ldrex	r3, [r3]
 8007cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	6979      	ldr	r1, [r7, #20]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e6      	bne.n	8007ce0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff f997 	bl	8007054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d26:	bf00      	nop
 8007d28:	3720      	adds	r7, #32
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b09c      	sub	sp, #112	@ 0x70
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d48:	2b22      	cmp	r3, #34	@ 0x22
 8007d4a:	f040 80be 	bne.w	8007eca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007d5c:	b2d9      	uxtb	r1, r3
 8007d5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d68:	400a      	ands	r2, r1
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f040 80a1 	bne.w	8007eda <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007da8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007db8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e6      	bne.n	8007d98 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007dea:	647a      	str	r2, [r7, #68]	@ 0x44
 8007dec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007df0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e5      	bne.n	8007dca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a33      	ldr	r2, [pc, #204]	@ (8007ee4 <UART_RxISR_8BIT+0x1b4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d01f      	beq.n	8007e5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d018      	beq.n	8007e5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	623b      	str	r3, [r7, #32]
   return(result);
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e6      	bne.n	8007e2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d12e      	bne.n	8007ec2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0310 	bic.w	r3, r3, #16
 8007e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	69b9      	ldr	r1, [r7, #24]
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	617b      	str	r3, [r7, #20]
   return(result);
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e6      	bne.n	8007e6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f003 0310 	and.w	r3, r3, #16
 8007ea6:	2b10      	cmp	r3, #16
 8007ea8:	d103      	bne.n	8007eb2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2210      	movs	r2, #16
 8007eb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7f9 f978 	bl	80011b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ec0:	e00b      	b.n	8007eda <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff f8d0 	bl	8007068 <HAL_UART_RxCpltCallback>
}
 8007ec8:	e007      	b.n	8007eda <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699a      	ldr	r2, [r3, #24]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0208 	orr.w	r2, r2, #8
 8007ed8:	619a      	str	r2, [r3, #24]
}
 8007eda:	bf00      	nop
 8007edc:	3770      	adds	r7, #112	@ 0x70
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40008000 	.word	0x40008000

08007ee8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b09c      	sub	sp, #112	@ 0x70
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007ef6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f00:	2b22      	cmp	r3, #34	@ 0x22
 8007f02:	f040 80be 	bne.w	8008082 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f14:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007f1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f1e:	4013      	ands	r3, r2
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2a:	1c9a      	adds	r2, r3, #2
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f040 80a1 	bne.w	8008092 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f64:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f70:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e6      	bne.n	8007f50 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007fa2:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e5      	bne.n	8007f82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a33      	ldr	r2, [pc, #204]	@ (800809c <UART_RxISR_16BIT+0x1b4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d01f      	beq.n	8008014 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d018      	beq.n	8008014 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008002:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e6      	bne.n	8007fe2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008018:	2b01      	cmp	r3, #1
 800801a:	d12e      	bne.n	800807a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f023 0310 	bic.w	r3, r3, #16
 8008036:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	461a      	mov	r2, r3
 800803e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008044:	6979      	ldr	r1, [r7, #20]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	e841 2300 	strex	r3, r2, [r1]
 800804c:	613b      	str	r3, [r7, #16]
   return(result);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e6      	bne.n	8008022 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b10      	cmp	r3, #16
 8008060:	d103      	bne.n	800806a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2210      	movs	r2, #16
 8008068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7f9 f89c 	bl	80011b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008078:	e00b      	b.n	8008092 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fe fff4 	bl	8007068 <HAL_UART_RxCpltCallback>
}
 8008080:	e007      	b.n	8008092 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0208 	orr.w	r2, r2, #8
 8008090:	619a      	str	r2, [r3, #24]
}
 8008092:	bf00      	nop
 8008094:	3770      	adds	r7, #112	@ 0x70
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	40008000 	.word	0x40008000

080080a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b0ac      	sub	sp, #176	@ 0xb0
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080d6:	2b22      	cmp	r3, #34	@ 0x22
 80080d8:	f040 8182 	bne.w	80083e0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080e2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080e6:	e125      	b.n	8008334 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ee:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80080f6:	b2d9      	uxtb	r1, r3
 80080f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008102:	400a      	ands	r2, r1
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b29a      	uxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800812e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	2b00      	cmp	r3, #0
 8008138:	d053      	beq.n	80081e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800813a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d011      	beq.n	800816a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800814a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00b      	beq.n	800816a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2201      	movs	r2, #1
 8008158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008160:	f043 0201 	orr.w	r2, r3, #1
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800816a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d011      	beq.n	800819a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00b      	beq.n	800819a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2202      	movs	r2, #2
 8008188:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008190:	f043 0204 	orr.w	r2, r3, #4
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800819a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d011      	beq.n	80081ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 80081a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00b      	beq.n	80081ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2204      	movs	r2, #4
 80081b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c0:	f043 0202 	orr.w	r2, r3, #2
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d006      	beq.n	80081e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7fe ff51 	bl	800707c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 80a2 	bne.w	8008334 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80081fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008212:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008214:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008218:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008220:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e4      	bne.n	80081f0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3308      	adds	r3, #8
 800822c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800823c:	f023 0301 	bic.w	r3, r3, #1
 8008240:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3308      	adds	r3, #8
 800824a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800824e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008250:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008254:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800825c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e1      	bne.n	8008226 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a5f      	ldr	r2, [pc, #380]	@ (80083f8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d021      	beq.n	80082c4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01a      	beq.n	80082c4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800829c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800829e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80082b2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80082b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80082be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e4      	bne.n	800828e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d130      	bne.n	800832e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e2:	f023 0310 	bic.w	r3, r3, #16
 80082e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e4      	bne.n	80082d2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f003 0310 	and.w	r3, r3, #16
 8008312:	2b10      	cmp	r3, #16
 8008314:	d103      	bne.n	800831e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2210      	movs	r2, #16
 800831c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7f8 ff42 	bl	80011b0 <HAL_UARTEx_RxEventCallback>
 800832c:	e002      	b.n	8008334 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7fe fe9a 	bl	8007068 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008334:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008338:	2b00      	cmp	r3, #0
 800833a:	d006      	beq.n	800834a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800833c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008340:	f003 0320 	and.w	r3, r3, #32
 8008344:	2b00      	cmp	r3, #0
 8008346:	f47f aecf 	bne.w	80080e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008350:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008354:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008358:	2b00      	cmp	r3, #0
 800835a:	d049      	beq.n	80083f0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008362:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008366:	429a      	cmp	r2, r3
 8008368:	d242      	bcs.n	80083f0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	61fb      	str	r3, [r7, #28]
   return(result);
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3308      	adds	r3, #8
 800838a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800838e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008390:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800839c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e3      	bne.n	800836a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a15      	ldr	r2, [pc, #84]	@ (80083fc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80083a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f043 0320 	orr.w	r3, r3, #32
 80083bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083ca:	61bb      	str	r3, [r7, #24]
 80083cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6979      	ldr	r1, [r7, #20]
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	613b      	str	r3, [r7, #16]
   return(result);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e4      	bne.n	80083a8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083de:	e007      	b.n	80083f0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0208 	orr.w	r2, r2, #8
 80083ee:	619a      	str	r2, [r3, #24]
}
 80083f0:	bf00      	nop
 80083f2:	37b0      	adds	r7, #176	@ 0xb0
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	40008000 	.word	0x40008000
 80083fc:	08007d31 	.word	0x08007d31

08008400 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b0ae      	sub	sp, #184	@ 0xb8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800840e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008436:	2b22      	cmp	r3, #34	@ 0x22
 8008438:	f040 8186 	bne.w	8008748 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008442:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008446:	e129      	b.n	800869c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800845a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800845e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008462:	4013      	ands	r3, r2
 8008464:	b29a      	uxth	r2, r3
 8008466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800846a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008470:	1c9a      	adds	r2, r3, #2
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b00      	cmp	r3, #0
 800849c:	d053      	beq.n	8008546 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800849e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d011      	beq.n	80084ce <UART_RxISR_16BIT_FIFOEN+0xce>
 80084aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00b      	beq.n	80084ce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2201      	movs	r2, #1
 80084bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c4:	f043 0201 	orr.w	r2, r3, #1
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d011      	beq.n	80084fe <UART_RxISR_16BIT_FIFOEN+0xfe>
 80084da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00b      	beq.n	80084fe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2202      	movs	r2, #2
 80084ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f4:	f043 0204 	orr.w	r2, r3, #4
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	d011      	beq.n	800852e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800850a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2204      	movs	r2, #4
 800851c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008524:	f043 0202 	orr.w	r2, r3, #2
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008534:	2b00      	cmp	r3, #0
 8008536:	d006      	beq.n	8008546 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7fe fd9f 	bl	800707c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	f040 80a4 	bne.w	800869c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800857a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800857e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e2      	bne.n	8008554 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800859e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80085b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e1      	bne.n	800858e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a5f      	ldr	r2, [pc, #380]	@ (8008760 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d021      	beq.n	800862c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d01a      	beq.n	800862c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008606:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800860a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800861a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800861e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008620:	e841 2300 	strex	r3, r2, [r1]
 8008624:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1e4      	bne.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008630:	2b01      	cmp	r3, #1
 8008632:	d130      	bne.n	8008696 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864a:	f023 0310 	bic.w	r3, r3, #16
 800864e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800865c:	647b      	str	r3, [r7, #68]	@ 0x44
 800865e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800866a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e4      	bne.n	800863a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	f003 0310 	and.w	r3, r3, #16
 800867a:	2b10      	cmp	r3, #16
 800867c:	d103      	bne.n	8008686 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2210      	movs	r2, #16
 8008684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7f8 fd8e 	bl	80011b0 <HAL_UARTEx_RxEventCallback>
 8008694:	e002      	b.n	800869c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7fe fce6 	bl	8007068 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800869c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d006      	beq.n	80086b2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80086a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f47f aecb 	bne.w	8008448 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086b8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d049      	beq.n	8008758 <UART_RxISR_16BIT_FIFOEN+0x358>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80086ca:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d242      	bcs.n	8008758 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	623b      	str	r3, [r7, #32]
   return(result);
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3308      	adds	r3, #8
 80086f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80086f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80086f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e3      	bne.n	80086d2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a15      	ldr	r2, [pc, #84]	@ (8008764 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800870e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	60fb      	str	r3, [r7, #12]
   return(result);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f043 0320 	orr.w	r3, r3, #32
 8008724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	461a      	mov	r2, r3
 800872e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	69b9      	ldr	r1, [r7, #24]
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	617b      	str	r3, [r7, #20]
   return(result);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e4      	bne.n	8008710 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008746:	e007      	b.n	8008758 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	699a      	ldr	r2, [r3, #24]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0208 	orr.w	r2, r2, #8
 8008756:	619a      	str	r2, [r3, #24]
}
 8008758:	bf00      	nop
 800875a:	37b8      	adds	r7, #184	@ 0xb8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40008000 	.word	0x40008000
 8008764:	08007ee9 	.word	0x08007ee9

08008768 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_UARTEx_DisableFifoMode+0x16>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e027      	b.n	800880a <HAL_UARTEx_DisableFifoMode+0x66>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2224      	movs	r2, #36	@ 0x24
 80087c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0201 	bic.w	r2, r2, #1
 80087e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2220      	movs	r2, #32
 80087fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008826:	2b01      	cmp	r3, #1
 8008828:	d101      	bne.n	800882e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800882a:	2302      	movs	r3, #2
 800882c:	e02d      	b.n	800888a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2224      	movs	r2, #36	@ 0x24
 800883a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 0201 	bic.w	r2, r2, #1
 8008854:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f8a0 	bl	80089b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2220      	movs	r2, #32
 800887c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d101      	bne.n	80088aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088a6:	2302      	movs	r3, #2
 80088a8:	e02d      	b.n	8008906 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2224      	movs	r2, #36	@ 0x24
 80088b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0201 	bic.w	r2, r2, #1
 80088d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f862 	bl	80089b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b08c      	sub	sp, #48	@ 0x30
 8008912:	af00      	add	r7, sp, #0
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	4613      	mov	r3, r2
 800891a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008928:	2b20      	cmp	r3, #32
 800892a:	d13b      	bne.n	80089a4 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8008932:	88fb      	ldrh	r3, [r7, #6]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e034      	b.n	80089a6 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2201      	movs	r2, #1
 8008940:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8008948:	88fb      	ldrh	r3, [r7, #6]
 800894a:	461a      	mov	r2, r3
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f7ff f824 	bl	800799c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008958:	2b01      	cmp	r3, #1
 800895a:	d11d      	bne.n	8008998 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2210      	movs	r2, #16
 8008962:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	617b      	str	r3, [r7, #20]
   return(result);
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f043 0310 	orr.w	r3, r3, #16
 8008978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008982:	627b      	str	r3, [r7, #36]	@ 0x24
 8008984:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6a39      	ldr	r1, [r7, #32]
 8008988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e6      	bne.n	8008964 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8008996:	e002      	b.n	800899e <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800899e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089a2:	e000      	b.n	80089a6 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80089a4:	2302      	movs	r3, #2
  }
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3730      	adds	r7, #48	@ 0x30
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d108      	bne.n	80089d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089d0:	e031      	b.n	8008a36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089d2:	2308      	movs	r3, #8
 80089d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089d6:	2308      	movs	r3, #8
 80089d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	0e5b      	lsrs	r3, r3, #25
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	0f5b      	lsrs	r3, r3, #29
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	7b3a      	ldrb	r2, [r7, #12]
 80089fe:	4911      	ldr	r1, [pc, #68]	@ (8008a44 <UARTEx_SetNbDataToProcess+0x94>)
 8008a00:	5c8a      	ldrb	r2, [r1, r2]
 8008a02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a06:	7b3a      	ldrb	r2, [r7, #12]
 8008a08:	490f      	ldr	r1, [pc, #60]	@ (8008a48 <UARTEx_SetNbDataToProcess+0x98>)
 8008a0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	7b7a      	ldrb	r2, [r7, #13]
 8008a1c:	4909      	ldr	r1, [pc, #36]	@ (8008a44 <UARTEx_SetNbDataToProcess+0x94>)
 8008a1e:	5c8a      	ldrb	r2, [r1, r2]
 8008a20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a24:	7b7a      	ldrb	r2, [r7, #13]
 8008a26:	4908      	ldr	r1, [pc, #32]	@ (8008a48 <UARTEx_SetNbDataToProcess+0x98>)
 8008a28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	08008cec 	.word	0x08008cec
 8008a48:	08008cf4 	.word	0x08008cf4

08008a4c <memset>:
 8008a4c:	4402      	add	r2, r0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d100      	bne.n	8008a56 <memset+0xa>
 8008a54:	4770      	bx	lr
 8008a56:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5a:	e7f9      	b.n	8008a50 <memset+0x4>

08008a5c <__libc_init_array>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8008a94 <__libc_init_array+0x38>)
 8008a60:	4c0d      	ldr	r4, [pc, #52]	@ (8008a98 <__libc_init_array+0x3c>)
 8008a62:	1b64      	subs	r4, r4, r5
 8008a64:	10a4      	asrs	r4, r4, #2
 8008a66:	2600      	movs	r6, #0
 8008a68:	42a6      	cmp	r6, r4
 8008a6a:	d109      	bne.n	8008a80 <__libc_init_array+0x24>
 8008a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8008a9c <__libc_init_array+0x40>)
 8008a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8008aa0 <__libc_init_array+0x44>)
 8008a70:	f000 f818 	bl	8008aa4 <_init>
 8008a74:	1b64      	subs	r4, r4, r5
 8008a76:	10a4      	asrs	r4, r4, #2
 8008a78:	2600      	movs	r6, #0
 8008a7a:	42a6      	cmp	r6, r4
 8008a7c:	d105      	bne.n	8008a8a <__libc_init_array+0x2e>
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a84:	4798      	blx	r3
 8008a86:	3601      	adds	r6, #1
 8008a88:	e7ee      	b.n	8008a68 <__libc_init_array+0xc>
 8008a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a8e:	4798      	blx	r3
 8008a90:	3601      	adds	r6, #1
 8008a92:	e7f2      	b.n	8008a7a <__libc_init_array+0x1e>
 8008a94:	08008d04 	.word	0x08008d04
 8008a98:	08008d04 	.word	0x08008d04
 8008a9c:	08008d04 	.word	0x08008d04
 8008aa0:	08008d08 	.word	0x08008d08

08008aa4 <_init>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	bf00      	nop
 8008aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aaa:	bc08      	pop	{r3}
 8008aac:	469e      	mov	lr, r3
 8008aae:	4770      	bx	lr

08008ab0 <_fini>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr
